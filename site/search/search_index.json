{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"General","text":""},{"location":"#overview","title":"Overview","text":"<p>This documentation is for Cheer Supports app IOS version.</p> <p>This mobile application is the application of the Cheer Supports Website. It has been developed using the web-view method to ensure familiarity and display information about the events regularly and automatically. It also has additional features to cover the minimum features and requirements of a web-view app to publish in the Apple Store.</p> <p>Check more details about App Review Guidelines. </p> <p>Application features: </p> <ul> <li>In app login system</li> <li>In app chat system</li> <li>Daily tracking system </li> <li>Daily task system</li> <li>Rewards system</li> <li>Simple Leveling system</li> <li>In app usage only items</li> <li>In app purchase with Apple Pay</li> <li>Has notification system </li> <li>Has own point system for purchasing in app item</li> </ul> <p>Cheer Support App Repository</p>"},{"location":"#app-settings","title":"App Settings","text":"<p>Min IOS Deployment Target : 15.1</p> <p>Bundle Identifier : com.Kyi.Co.Ltd.Jp.Cheer-Supports</p> <p>Capabitilities : </p> <ul> <li>Background Modes [ Background fetch, Remote Notification, Background processing ]</li> <li>In-App Purchase</li> <li>Push Notification</li> </ul> <p>Operation System: MacOS</p> <p>IDE: Xcode</p> <p>Programming Language: Swift</p> <p>Framework: SwiftUI</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li> <p>Either use this step  Install GitHub Desktop software MacOS  Follow this steps for cloning repository.</p> </li> <li> <p>Or use command-line tools (terminal)</p> </li> </ul> <p><pre><code>git clone --single-branch --branch features/NewIOSVersion https://github.com/kyi-developers-organization/Cheer-Supports-Mobile-App.git\n</code></pre> This command line will clone ios xcode project only.</p>"},{"location":"#dependecies","title":"Dependecies","text":"<ul> <li> <p>Bottom Sheet -&gt; version 3.1.1 <pre><code>https://github.com/lucaszischka/BottomSheet.git\n</code></pre></p> </li> <li> <p>Firebase SDK -&gt; version 10.19.1 <pre><code>https://github.com/firebase/firebase-ios-sdk.git\n</code></pre></p> </li> <li> <p>SDWebImage SwiftUi -&gt; version 3.0.2 <pre><code>https://github.com/SDWebImage/SDWebImageSwiftUI.git\n</code></pre></p> </li> <li> <p>GoogleAPI Auth -&gt;  version 0.5.3 <pre><code>https://github.com/googleapis/google-auth-library-swift.git\n</code></pre></p> </li> </ul> <p>SPM Screenshot</p>"},{"location":"#project-layout","title":"Project layout","text":"<p>This is full navigation layout</p>"},{"location":"#home","title":"Home","text":"<p>Home is linked to Profile,  Chat, Cheer --&gt; Items and Settings views through buttons.</p> <p>Home page has 2 main stack view. First is contain webview, Second one is contain ui buttons. For better visualization about stack views check this image User has to be login both app and website login system otherwise streaming button will popup Signin view.  Users can register through website. </p>"},{"location":"#profile","title":"Profile","text":"<p>Profile is linked to Daily Tasks, Signin, Exp Purchase and Cheer through the buttons. </p> <p>This view divided 3 main stack views. User level section has Login button link to Sigin view. All user informations are saved Firebase DB --&gt; Users --&gt; UUID (uniqe id generated by Firebase).</p> <p>Reward Section contain only ui views.</p> <p>Level up section is has 3 buttons and linked to exp card purchase view, daily tasks view and Cheer purchase view respectively.  </p>"},{"location":"#daily-tasks","title":"Daily Tasks","text":"<p>Daily is only linked to Profile view. Divided 3 main stack views.  User Info section;  most of datas are retrieve from Firebase database, only cheer data value retrieve from AWS database. Daily Login section; contain UI view and related functions. Daily Missions section; Information about mission and button for collecting reward, buttons are will active when user finised the task otherwise will be inactive. Active buttons color is orange, inactive buttons color is gray. Every task has different shop points and exp point.</p>"},{"location":"#chat-room","title":"Chat Room","text":"<p>Chat is linked to Signin and Home through to butttons in Top section view. Chat section shows list of the message save in Firebase --&gt; Msgs documents. Bottom section; image picker and emoji view list hidden under plus \"+\" button and send button will hidden until user type any text or select any image(or emoji).  Top section and Section backgrounds are synchronized with ui button style. </p>"},{"location":"#cart","title":"Cart","text":"<p>Shop Cart has simple stack view tab buttons and view sections view section. View section shows cheer purchase view (default view) and app item purchase view. The shop cart view is linked only to the home view. Other content shows as a subview using the Bottom Sheet plugin. The toolbar contains shop points and the total cheer the user has. </p>"},{"location":"#cheer-purchase","title":"Cheer Purchase","text":"<p>There are 7 Cheer purchase products available.  500, 1000, 3000, 5000, 10000, 30000, and 50000 products are listed in view. If the user not logged in it will shows a notification. After successfulll purchase it will shows a notification.   </p>"},{"location":"#app-items-purchase","title":"App Items Purchase","text":"<p>There are 6 subview exist in App Item View. All subviews has 2 detents; medium and large.  Detents are dynamically adjusted the subview height. </p> <p>There are 3 purchase notification;</p> <ul> <li>Not enough Cheer or shopping Point</li> <li>Already have item</li> <li>Successfully purchased </li> </ul> <p>these notification are implemented in all app item purchase system.  </p>"},{"location":"#exp-purchase","title":"Exp Purchase","text":"<p>Simple a stack view with a purchase button. Detents set medium as default value. The maximum number of card purchases at a time has been determined as 99. </p>"},{"location":"#exp-multiply","title":"Exp Multiply","text":"<p>A view contain 3 stack views. Stack view contain information text and button. On button click it will show a confirmation dialog. </p>"},{"location":"#ui-style","title":"UI Style","text":"<p>There are 3 main stack views. These are button styles(3 items), background images(6 items) and backround color(6 items). All items can be purchased either with Cheer or Point. On Items click will show purchase options dialog. Every item group prices are different, button styles are each 500 Cheer or 500 Point, background images are each 200 Cheer or Point and background colors are each 50 Cheer or Point. Button Styles are set with a uniqe background images and background images and background color can be used in chat room background settings.</p>"},{"location":"#font-style","title":"Font Style","text":"<p>There are 2 main stack views.  These are font colors (6 items) and font styles(4 items). All items can be purchased either with Cheer or Point. On Items click will show purchase options dialog. Every items can be purchase  50 Cheer or 50 Point. Font style and font color can effect chat message text style. </p> <p>Note: Currently font style not effect logographic kanjis and furigana</p>"},{"location":"#emojis","title":"Emojis","text":"<p>There are 5 items using same view model within only stack view shows a list view. List items are clickable and show full list of the emoji group items. Items can be purhcase with cheer only and each emoji group is cost 500 cheer. On list clicked will show a popover. </p>"},{"location":"#animated-emojis","title":"Animated Emojis","text":"<p>There are 5 items using same view model within only stack view shows a list view. List items are clickable and show full list of the emoji group items. Items can be purhcase with cheer only and each emoji group is cost 1000 cheer. On list clicked will show a popover. </p>"},{"location":"#settings","title":"Settings","text":"<p>Settings is connected Home and Item views. Settings is divided for 3 sections. </p> <ol> <li>General</li> <li>Blocked User </li> <li>Others</li> </ol> <p>General section currently contain only owned items. Can find more detals in Items (Navigate to Items).</p> <p>Blocked Users has only list of the blocked users.</p> <p>Others section has 3 settings one of them share the application. the other is a toogle for showing level log in chat room view. When user reach level 2 it will automaticly will turn on. And last one is delete the account; this settings is required to publish the application in App Store. Delete the account is requests the deletion of data from both Firebase and AWS databases. </p>"},{"location":"#items","title":"Items","text":"<p>Item Lists Owned Items connect to Settings view. Divided 4 section with section header. All datas are saved in Owned Items array of users Firebase data collection. All settings effects only app view and styles, there is no effect on Cheer Supports webview also chat items cannot be use in streaming chat.</p> <ol> <li> <p>Background; This is for chat room message area background design settings. Onclick shows a menu, if the user has any color or image will show the submenu as Color or Images, and other default and cancel options available in the menu view list. \"Background\" text is clickable. For better performace all Horizontal Stack view should be button. </p> </li> <li> <p>Button; This is change set style for home button ui view style and also chat room top bar and bottom bar ui view. If user has any style it will shows a menu option with name.</p> </li> <li> <p>Font; There are 2 settings in this section font style and font color. Onclick shows a menu, if user has any font style or color will show the name in related menu. Current font styles are not effected furigana and kanjis. Need to add new styles for both Japanese and Chinese languages and Font Style Item view in shop should also changed based on language.</p> </li> <li> <p>Chat Items; Currently we have emojis and animated emojis items can be used in the app chat system. It is a dropdown list and shows a list of chat items purchased as text. List items are non-clickable.</p> </li> </ol>"},{"location":"#future-of-app","title":"Future of App","text":"<p>There are a couple of features that need to be added and some that need to be updated for better app quality. It will be divided into 2 sections New Features and Updates Required Features. Couldn't put the app in stress tests. Based on my testing some features consume too much RAM for example animated emojis in the empty chat consume an average 30 mb when adding images or animated emojis it will rise to 100 mb. By following SDWebImageSwiftUI documentation instructions for cache managing decrease ram usage to 70 mb. Need additional measurements to further decrease for better performance. Some features need to be added (some of them are requested from the client). </p>"},{"location":"#updates-required-features","title":"Updates Required Features","text":"<p>All of these suggestions are for better user experience and better app performance.  Feel free to implement solutions If you notice different issue(s) or have better solutions. Overall we are developers, and building the best products is our first task.</p> <ul> <li> <p>Webview is loading slowly. Excluding external reasons (non-app related reasons like wireless connection speed, connection signal quality, mobile phone CPU speed, RAM capacity of the phone, IOS version, etc.) there are multiple solutions to improve app quality. </p> <ol> <li>Webview app speed is directly linked to website performance. Therefore improve website load speed.</li> <li>By decreasing task requests before the app launch.</li> <li>Better user experiences add a loading image or some images can hide the loading process. Hide the image when webview is fully loaded.</li> </ol> </li> <li> <p>Animated Emojis consume too much RAM therefore certain views need attention. Global Chat, ShopView/Animated Emojis view are currently using SDWebImageSwiftui. </p> <ol> <li>Show limited messages in history of the messages.</li> <li>Play once or twice animated images. </li> <li>On tap gesture play selected emojis animation.</li> <li>Stop playing all animated emojis when the user saw the list.  </li> </ol> </li> <li> <p>Change the Full design of Shop Cart View. The current Bottom Sheet plugin response is not good enough.</p> <ol> <li>Change the bottom sheet view system to a navigation link system.</li> <li>Native sheet detents (medium and large) options are available IOS version 16.0 or later. Either change the minimum target version from 15.1 to 16.0 to create a dynamic detents system.  </li> </ol> </li> <li> <p>Add more emojis.</p> </li> <li> <p>Add more animated emojis.</p> </li> <li> <p>Add more UI styles. Current font styles are working on romaji letters, add more font styles, especially for furigana and kanji. </p> </li> <li> <p>Update settings UI view with better design.</p> </li> <li> <p>Replace the webview system with an application-specific system with new ui design and with synchronized current website database.</p> </li> </ul>"},{"location":"#new-features","title":"New Features","text":"<p>Before explaining new features there are a few points that need to mention. Before started developing the mobile application there was a conversation about changing Cheer Support web content. At first idea was a full renewal of the web content and then middle of development it is changed to re-design. Those are 2 different approaches. Because of the uncertainty mobile app structure becomes more restricted.</p> <p>Renewal is changing all structures, API routes, UI design, and database of the web content. Anything related back-end will directly affect the mobile application.  </p> <p>Redesigning, on the other hand, affects the user's view of web content. While this approach has a potential impact on the backend, it will be limited and, therefore on impact the mobile app also limited. </p> <p>Members who could work were limited. I worked with only one graphic designer on this project. He creates most of the images, emojis and animated emojis, the rest is done solely by me. There was only one front-end developer in the web content, but she was working as a full-stack developer. So working with her also was out of the option.</p> <p>There were requests from the CEO and client. Most of them are already done and there are 2 features left to implement for finishing the app. There are preparations to be made before adding these features, as well as the completion of the redesign of the website and the completion of the back-end related new design.</p> <ul> <li> <p>At the time of writing this document, there were 7 WebGL applications in the web content. All WebGL applications are developed with a cross-platform called Unity Game Engine. These applications do not work on mobile browsers and the CEO requested that these applications be available on mobile devices. To achieve this those are the preparations required;</p> <ol> <li>Convert to WebGL application to IOS application</li> <li>Optimized the app for mobile (for example occlusion culling, lightmap, decrease the RAM usage ...)</li> <li>Add UI and controller system for mobile app use</li> <li>Decrease the size of the app (There is a maximum size limit to upload the App Store)</li> </ol> </li> </ul> <p>The above steps should be followed for 6 applications. WebGL applications called Hoshiyomi are already published on the App Store and Play Store.</p> <ul> <li> <p>Add the Augmented Reality future with body and face tracking to the live-streaming feature. </p> </li> <li> <p>Add noice cancelling feature to live-streaming.</p> </li> </ul>"},{"location":"example/","title":"Examples","text":""},{"location":"technical/","title":"Technical","text":""},{"location":"technical/#specification","title":"Specification","text":"<ol> <li> <p>This application developed on IOS 15.1 - 17.4 - using Swift / Objective-C - with SwiftUI framework</p> </li> <li> <p>This applicaiton is intended for use smartphone only, in a portrait orientation.</p> </li> <li> <p>JSON requests are used to handle the communication between the app and servers.</p> </li> <li> <p>This application works only in online mode.</p> </li> <li> <p>Push notifications are handled by Firebase.</p> </li> <li> <p>Realtime messages are handled by Firebase.</p> </li> <li> <p>User Daily Login informations are handled by Firebase.</p> </li> <li></li> </ol>"},{"location":"technical/#key-features","title":"Key Features","text":""},{"location":"technical/#webview-feature","title":"Webview Feature","text":"<p>To show that Cheer Supports web content on mobile I used an open-source web browser engine called Webkit. WebKit is a browser engine primarily used in Apple's Safari web browser, as well as all web browsers on iOS and iPadOS. Cheer Supports web content is changing frequently and to keep up with the web content updates webview was the best choice. All scripts related webview is separeated from the others and they under 'Webservices' folder. Folder contain \"WebView\", \"WebViewModel\", \"APIService\" and AccountServiceViewModel script files. </p>"},{"location":"technical/#webview-script","title":"WebView Script","text":""},{"location":"technical/#webviewmodel","title":"WebViewModel","text":""},{"location":"technical/#apiservice","title":"APIService","text":""},{"location":"technical/#accountserviceviewmodel","title":"AccountServiceViewModel","text":""},{"location":"technical/#services","title":"Services","text":""},{"location":"technical/#databases","title":"Databases","text":""},{"location":"technical/#apis","title":"API's","text":""},{"location":"technical/#functions","title":"Functions","text":""},{"location":"technical/#other","title":"Other","text":""},{"location":"about/license/","title":"License","text":""},{"location":"about/release-notes/","title":"Release Notes","text":""}]}