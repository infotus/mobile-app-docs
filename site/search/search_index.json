{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intro","text":""},{"location":"#overview","title":"Overview","text":"<p>This documentation is for Cheer Supports app IOS version.</p> <p>This mobile application is the application of the Cheer Supports Website. It has been developed using the web-view method to ensure familiarity and display information about the events regularly and automatically. It also has additional features to cover the minimum features and requirements of a web-view app to publish in the Apple Store.</p> <p>Check more details about App Review Guidelines. </p> <p>Application features: </p> <ul> <li>In app login system</li> <li>In app chat system</li> <li>Daily tracking system </li> <li>Daily task system</li> <li>Rewards system</li> <li>Simple Leveling system</li> <li>In app usage only items</li> <li>In app purchase with Apple Pay</li> <li>Has notification system </li> <li>Has own point system for purchasing in app item</li> </ul> <p>Cheer Support App Repository</p>"},{"location":"#app-settings","title":"App Settings","text":"<p>Min IOS Deployment Target : 15.1</p> <p>Bundle Identifier : com.Kyi.Co.Ltd.Jp.Cheer-Supports</p> <p>Capabitilities : </p> <ul> <li>Background Modes [ Background fetch, Remote Notification, Background processing ]</li> <li>In-App Purchase</li> <li>Push Notification</li> </ul> <p>Operation System: MacOS</p> <p>IDE: Xcode</p> <p>Programming Language: Swift</p> <p>Framework: SwiftUI</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li> <p>Either use this step  Install GitHub Desktop software MacOS  Follow this steps for cloning repository.</p> </li> <li> <p>Or use command-line tools (terminal)</p> </li> </ul> <p><pre><code>git clone --single-branch --branch features/NewIOSVersion https://github.com/kyi-developers-organization/Cheer-Supports-Mobile-App.git\n</code></pre> This command line will clone ios xcode project only.</p>"},{"location":"#dependecies","title":"Dependecies","text":"<ul> <li> <p>Bottom Sheet -&gt; version 3.1.1 <pre><code>https://github.com/lucaszischka/BottomSheet.git\n</code></pre></p> </li> <li> <p>Firebase SDK -&gt; version 10.19.1 <pre><code>https://github.com/firebase/firebase-ios-sdk.git\n</code></pre></p> </li> <li> <p>SDWebImage SwiftUi -&gt; version 3.0.2 <pre><code>https://github.com/SDWebImage/SDWebImageSwiftUI.git\n</code></pre></p> </li> <li> <p>GoogleAPI Auth -&gt;  version 0.5.3 <pre><code>https://github.com/googleapis/google-auth-library-swift.git\n</code></pre></p> </li> </ul> <p>SPM Screenshot</p>"},{"location":"about/intro/","title":"Intro","text":""},{"location":"about/license/","title":"License","text":""},{"location":"about/release-notes/","title":"Release","text":""},{"location":"general/future/","title":"Future of App","text":"<p>There are a couple of features that need to be added and some that need to be updated for better app quality. It will be divided into 2 sections New Features and Updates Required Features. Couldn't put the app in stress tests. Based on my testing some features consume too much RAM for example animated emojis in the empty chat consume an average 30 mb when adding images or animated emojis it will rise to 100 mb. By following SDWebImageSwiftUI documentation instructions for cache managing decrease ram usage to 70 mb. Need additional measurements to further decrease for better performance. Some features need to be added (some of them are requested from the client). </p>"},{"location":"general/future/#updates-required-features","title":"Updates Required Features","text":"<p>All of these suggestions are for better user experience and better app performance.  Feel free to implement solutions If you notice different issue(s) or have better solutions. Overall we are developers, and building the best products is our first task.</p> <ul> <li> <p>Webview is loading slowly. Excluding external reasons (non-app related reasons like wireless connection speed, connection signal quality, mobile phone CPU speed, RAM capacity of the phone, IOS version, etc.) there are multiple solutions to improve app quality. </p> <ol> <li>Webview app speed is directly linked to website performance. Therefore improve website load speed.</li> <li>By decreasing task requests before the app launch.</li> <li>Better user experiences add a loading image or some images can hide the loading process. Hide the image when webview is fully loaded.</li> </ol> </li> <li> <p>Animated Emojis consume too much RAM therefore certain views need attention. Global Chat, ShopView/Animated Emojis view are currently using SDWebImageSwiftui. </p> <ol> <li>Show limited messages in history of the messages.</li> <li>Play once or twice animated images. </li> <li>On tap gesture play selected emojis animation.</li> <li>Stop playing all animated emojis when the user saw the list.  </li> </ol> </li> <li> <p>Change the Full design of Shop Cart View. The current Bottom Sheet plugin response is not good enough.</p> <ol> <li>Change the bottom sheet view system to a navigation link system.</li> <li>Native sheet detents (medium and large) options are available IOS version 16.0 or later. Either change the minimum target version from 15.1 to 16.0 to create a dynamic detents system.  </li> </ol> </li> <li> <p>Add more emojis.</p> </li> <li> <p>Add more animated emojis.</p> </li> <li> <p>Add more UI styles. Current font styles are working on romaji letters, add more font styles, especially for furigana and kanji. </p> </li> <li> <p>Update settings UI view with better design.</p> </li> <li> <p>Replace the webview system with an application-specific system with new ui design and with synchronized current website database.</p> </li> </ul>"},{"location":"general/future/#new-features","title":"New Features","text":"<p>Before explaining new features there are a few points that need to mention. Before started developing the mobile application there was a conversation about changing Cheer Support web content. At first idea was a full renewal of the web content and then middle of development it is changed to re-design. Those are 2 different approaches. Because of the uncertainty mobile app structure becomes more restricted.</p> <p>Renewal is changing all structures, API routes, UI design, and database of the web content. Anything related back-end will directly affect the mobile application.  </p> <p>Redesigning, on the other hand, affects the user's view of web content. While this approach has a potential impact on the backend, it will be limited and, therefore on impact the mobile app also limited. </p> <p>Members who could work were limited. I worked with only one graphic designer on this project. He creates most of the images, emojis and animated emojis, the rest is done solely by me. There was only one front-end developer in the web content, but she was working as a full-stack developer. So working with her also was out of the option.</p> <p>There were requests from the CEO and client. Most of them are already done and there are 2 features left to implement for finishing the app. There are preparations to be made before adding these features, as well as the completion of the redesign of the website and the completion of the back-end related new design.</p> <ul> <li> <p>At the time of writing this document, there were 7 WebGL applications in the web content. All WebGL applications are developed with a cross-platform called Unity Game Engine. These applications do not work on mobile browsers and the CEO requested that these applications be available on mobile devices. To achieve this those are the preparations required;</p> <ol> <li>Convert to WebGL application to IOS application</li> <li>Optimized the app for mobile (for example occlusion culling, lightmap, decrease the RAM usage ...)</li> <li>Add UI and controller system for mobile app use</li> <li>Decrease the size of the app (There is a maximum size limit to upload the App Store)</li> </ol> </li> </ul> <p>The above steps should be followed for 6 applications. WebGL applications called Hoshiyomi are already published on the App Store and Play Store.</p> <ul> <li> <p>Add the Augmented Reality future with body and face tracking to the live-streaming feature. </p> </li> <li> <p>Add noice cancelling feature to live-streaming.</p> </li> </ul>"},{"location":"general/layout/","title":"Project Layout","text":"<p>This is full navigation layout</p>"},{"location":"general/layout/#home","title":"Home","text":"<p>Home is linked to Profile,  Chat, Cheer --&gt; Items and Settings views through buttons.</p> <p>Home page has 2 main stack view. First is contain webview, Second one is contain ui buttons. For better visualization about stack views check this image User has to be login both app and website login system otherwise streaming button will popup Signin view.  Users can register through website. </p>"},{"location":"general/layout/#profile","title":"Profile","text":"<p>Profile is linked to Daily Tasks, Signin, Exp Purchase and Cheer through the buttons. </p> <p>This view divided 3 main stack views. User level section has Login button link to Sigin view. All user informations are saved Firebase DB --&gt; Users --&gt; UUID (uniqe id generated by Firebase).</p> <p>Reward Section contain only ui views.</p> <p>Level up section is has 3 buttons and linked to exp card purchase view, daily tasks view and Cheer purchase view respectively.  </p>"},{"location":"general/layout/#daily-tasks","title":"Daily Tasks","text":"<p>Daily is only linked to Profile view. Divided 3 main stack views.  User Info section;  most of datas are retrieve from Firebase database, only cheer data value retrieve from AWS database. Daily Login section; contain UI view and related functions. Daily Missions section; Information about mission and button for collecting reward, buttons are will active when user finised the task otherwise will be inactive. Active buttons color is orange, inactive buttons color is gray. Every task has different shop points and exp point.</p>"},{"location":"general/layout/#chat-room","title":"Chat Room","text":"<p>Chat is linked to Signin and Home through to butttons in Top section view. Chat section shows list of the message save in Firebase --&gt; Msgs documents. Bottom section; image picker and emoji view list hidden under plus \"+\" button and send button will hidden until user type any text or select any image(or emoji).  Top section and Section backgrounds are synchronized with ui button style. </p>"},{"location":"general/layout/#cart","title":"Cart","text":"<p>Shop Cart has simple stack view tab buttons and view sections view section. View section shows cheer purchase view (default view) and app item purchase view. The shop cart view is linked only to the home view. Other content shows as a subview using the Bottom Sheet plugin. The toolbar contains shop points and the total cheer the user has. </p>"},{"location":"general/layout/#cheer-purchase","title":"Cheer Purchase","text":"<p>There are 7 Cheer purchase products available.  500, 1000, 3000, 5000, 10000, 30000, and 50000 products are listed in view. If the user not logged in it will shows a notification. After successfulll purchase it will shows a notification.   </p>"},{"location":"general/layout/#app-items-purchase","title":"App Items Purchase","text":"<p>There are 6 subview exist in App Item View. All subviews has 2 detents; medium and large.  Detents are dynamically adjusted the subview height. </p> <p>There are 3 purchase notification;</p> <ul> <li>Not enough Cheer or shopping Point</li> <li>Already have item</li> <li>Successfully purchased </li> </ul> <p>these notification are implemented in all app item purchase system.  </p>"},{"location":"general/layout/#exp-purchase","title":"Exp Purchase","text":"<p>Simple a stack view with a purchase button. Detents set medium as default value. The maximum number of card purchases at a time has been determined as 99. </p>"},{"location":"general/layout/#exp-multiply","title":"Exp Multiply","text":"<p>A view contain 3 stack views. Stack view contain information text and button. On button click it will show a confirmation dialog. </p>"},{"location":"general/layout/#ui-style","title":"UI Style","text":"<p>There are 3 main stack views. These are button styles(3 items), background images(6 items) and backround color(6 items). All items can be purchased either with Cheer or Point. On Items click will show purchase options dialog. Every item group prices are different, button styles are each 500 Cheer or 500 Point, background images are each 200 Cheer or Point and background colors are each 50 Cheer or Point. Button Styles are set with a uniqe background images and background images and background color can be used in chat room background settings.</p>"},{"location":"general/layout/#font-style","title":"Font Style","text":"<p>There are 2 main stack views.  These are font colors (6 items) and font styles(4 items). All items can be purchased either with Cheer or Point. On Items click will show purchase options dialog. Every items can be purchase  50 Cheer or 50 Point. Font style and font color can effect chat message text style. </p> <p>Note: Currently font style not effect logographic kanjis and furigana</p>"},{"location":"general/layout/#emojis","title":"Emojis","text":"<p>There are 5 items using same view model within only stack view shows a list view. List items are clickable and show full list of the emoji group items. Items can be purhcase with cheer only and each emoji group is cost 500 cheer. On list clicked will show a popover. </p>"},{"location":"general/layout/#animated-emojis","title":"Animated Emojis","text":"<p>There are 5 items using same view model within only stack view shows a list view. List items are clickable and show full list of the emoji group items. Items can be purhcase with cheer only and each emoji group is cost 1000 cheer. On list clicked will show a popover. </p>"},{"location":"general/layout/#settings","title":"Settings","text":"<p>Settings is connected Home and Item views. Settings is divided for 3 sections. </p> <ol> <li>General</li> <li>Blocked User </li> <li>Others</li> </ol> <p>General section currently contain only owned items. Can find more detals in Items (Navigate to Items).</p> <p>Blocked Users has only list of the blocked users.</p> <p>Others section has 3 settings one of them share the application. the other is a toogle for showing level log in chat room view. When user reach level 2 it will automaticly will turn on. And last one is delete the account; this settings is required to publish the application in App Store. Delete the account is requests the deletion of data from both Firebase and AWS databases. </p>"},{"location":"general/layout/#items","title":"Items","text":"<p>Item Lists Owned Items connect to Settings view. Divided 4 section with section header. All datas are saved in Owned Items array of users Firebase data collection. All settings effects only app view and styles, there is no effect on Cheer Supports webview also chat items cannot be use in streaming chat.</p> <ol> <li> <p>Background; This is for chat room message area background design settings. Onclick shows a menu, if the user has any color or image will show the submenu as Color or Images, and other default and cancel options available in the menu view list. \"Background\" text is clickable. For better performace all Horizontal Stack view should be button. </p> </li> <li> <p>Button; This is change set style for home button ui view style and also chat room top bar and bottom bar ui view. If user has any style it will shows a menu option with name.</p> </li> <li> <p>Font; There are 2 settings in this section font style and font color. Onclick shows a menu, if user has any font style or color will show the name in related menu. Current font styles are not effected furigana and kanjis. Need to add new styles for both Japanese and Chinese languages and Font Style Item view in shop should also changed based on language.</p> </li> <li> <p>Chat Items; Currently we have emojis and animated emojis items can be used in the app chat system. It is a dropdown list and shows a list of chat items purchased as text. List items are non-clickable.</p> </li> </ol>"},{"location":"technical/other/","title":"Other","text":""},{"location":"technical/tech-intro/","title":"Introduction","text":"<ol> <li> <p>This application developed on IOS 15.1 - 17.4 - using Swift / Objective-C - with SwiftUI framework</p> </li> <li> <p>This applicaiton is intended for use smartphone only, in a portrait orientation.</p> </li> <li> <p>JSON requests are used to handle the communication between the app and servers.</p> </li> <li> <p>This application works only in online mode.</p> </li> <li> <p>Push notifications are handled by Firebase.</p> </li> <li> <p>Real-time messages are handled by Firebase.</p> </li> <li> <p>User Daily Login informations are handled by Firebase, all information mobile application usage related only.</p> </li> <li> <p>New User registration can be done webview only. </p> </li> <li> <p>Webview datas are handled by AWS</p> </li> <li> <p>In app purchase system is implemented the mobile application only</p> </li> </ol>"},{"location":"technical/tech-intro/#purpose","title":"Purpose","text":"<p>This document provides a technical guide for iOS developers involved in the development, implementation, and maintenance of an iOS app.</p>"},{"location":"technical/tech-intro/#audience","title":"Audience","text":"<ul> <li>iOS Developers</li> <li>Project Managers</li> </ul>"},{"location":"technical/tech-intro/#technology-stack","title":"Technology Stack","text":"<ul> <li>iOS SDK: Development platform for building native iOS applications.</li> <li>Swift Programming Language: Primary language used for iOS app development.</li> <li>Firebase: Backend-as-a-Service platform for authentication, database (Firestore), and cloud functions.</li> </ul>"},{"location":"technical/tech-intro/#architecture-overview","title":"Architecture Overview","text":"<p>The app follows the Model-View-ViewModel (MVVM) design pattern:</p> <ul> <li> <p>Model: Data models for user profiles, login records. The Model in MVVM represents the data and business logic of the application. It is responsible for retrieving data, processing it, and defining how the data can be changed and manipulated.</p> </li> <li> <p>View: Interface elements designed using SwiftUI framework. The View is responsible for defining the structure, layout, and appearance of what users see on the screen.</p> </li> <li> <p>ViewModel: Logic to manage user interactions and data flow. The ViewModel in MVVM architecture serves as a bridge between the Model and the View. It's responsible for handling the logic for the UI and acts as an abstraction of the View, which contains a View's state and behavior.</p> </li> </ul>"},{"location":"technical/webview/","title":"WebView","text":""},{"location":"technical/webview/#overview","title":"Overview","text":"<p>To show that Cheer Supports web content on mobile I used an open-source web browser engine called Webkit. WebKit is a browser engine primarily used in Apple's Safari web browser, as well as all web browsers on iOS and iPadOS. Cheer Supports web content is changing frequently and to keep up with the web content updates webview was the best choice. All scripts related webview is separeated from the others and they under 'Webservices' folder. Folder contain \"WebView\", \"WebViewModel\", \"APIService\" and AccountServiceViewModel script files. </p> <p>The WebView struct is a SwiftUI component designed to display web content using WKWebView, which is part of the WebKit framework. It integrates into SwiftUI views to render web pages specified by a URL and provides functionality for observing URL changes, handling navigation, and interacting with JavaScript.</p>"},{"location":"technical/webview/#struct-webview","title":"Struct: WebView","text":"<p>The WebView struct conforms to UIViewRepresentable, making it compatible with SwiftUI's view hierarchy. Properties</p> <ul> <li>url: A String property representing the main URL to be loaded initially.</li> <li>webVM: An instance of WebViewModel used to manage state and interactions with the web view.</li> </ul>"},{"location":"technical/webview/#methods","title":"Methods","text":"<ul> <li> <p>makeUIView: Initializes and configures the WKWebView instance. Sets up configuration for media playback and JavaScript interaction permissions. Observes URL changes and updates the webVM's current_url property.</p> </li> <li> <p>updateUIView: Updates the WKWebView instance with a new URL when the url property changes.</p> </li> <li> <p>makeCoordinator: Creates and returns an instance of the Coordinator class, which acts as the delegate for the WKWebView and handles navigation events.</p> </li> </ul>"},{"location":"technical/webview/#class-coordinator","title":"Class: Coordinator","text":"<p>The Coordinator class manages interactions and events within the WKWebView instance. Properties</p> <ul> <li>parent: A reference to the parent WebView instance.</li> <li>observer: An optional NSKeyValueObservation instance to observe URL changes in the web view.</li> </ul>"},{"location":"technical/webview/#methods_1","title":"Methods","text":"<ul> <li> <p>webView(_:didFail:withError:): Delegate method called when navigation to a URL fails. Prints the error message.</p> </li> <li> <p>webView(_:didFinish:): Delegate method called when web view finishes loading a URL. Prints a success message.</p> </li> <li> <p>webView(_:createWebViewWith:for:windowFeatures:): Delegate method to handle creating a new web view for navigation actions that target a new frame.</p> </li> <li> <p>webView(_:didReceiveServerRedirectForProvisionalNavigation:): Delegate method called when the web view receives a server redirect during navigation. Prints the redirected URL.</p> </li> </ul>"},{"location":"technical/webview/#extension-wkwebview","title":"Extension: WKWebView","text":"<p>An extension on WKWebView provides additional functionality to create JSON data from a dictionary. Methods</p> <ul> <li>createJsonData(for:): Converts a dictionary [String:Any] into a JSON string, removing unnecessary whitespace and newline characters.</li> </ul>"},{"location":"technical/webview/#usage","title":"Usage","text":"<p>To use the WebView component in a SwiftUI view, initialize it with a url and webVM instance. Example usage: <pre><code>struct ContentView: View {\n    @StateObject private var webVM = WebViewModel()\n\n    var body: some View {\n        WebView(url: \"https://www.example.com\", webVM: webVM)\n            .onAppear {\n                // Additional setup when the web view appears\n            }\n    }\n}\n</code></pre></p> <p>Considerations:</p> <ul> <li>Ensure proper handling of JavaScript interactions and permissions based on application requirements.</li> <li>Monitor for potential memory leaks when using observers and delegates.</li> <li>Test thoroughly across different web content to ensure compatibility and responsiveness.</li> </ul> <p>This documentation outlines the structure, functionality, and usage considerations for integrating a web view within a SwiftUI application using the WebView struct.</p>"},{"location":"technical/webview/#webviewmodel","title":"WebViewModel","text":""},{"location":"technical/webview/#overview_1","title":"Overview","text":"<p>The WebViewModel.swift file contains the WebViewModel class, which serves as a bridge between SwiftUI components and the WKWebView for managing web content interactions. It includes methods for reloading, navigating, and interacting with local storage within the web view.</p>"},{"location":"technical/webview/#class","title":"Class","text":"<p>The WebViewModel class extends NSObject and conforms to ObservableObject and WKNavigationDelegate, facilitating communication between SwiftUI views and the web view.</p>"},{"location":"technical/webview/#properties","title":"Properties","text":"<ul> <li>current_url: A @Published property that stores the current URL loaded in the web view.</li> <li>webView: An optional WKWebView instance. Setting this property assigns the navigation delegate to self.</li> </ul>"},{"location":"technical/webview/#methods_2","title":"Methods","text":"<ul> <li> <p>reload(): Reloads the current web page.</p> </li> <li> <p>goBack(): Navigates back to the previous web page.</p> </li> <li> <p>getCurrentURL(): Retrieves the URL of the current web page.</p> </li> <li> <p>setLocalStorage(name: id: token: ): Stores user data in the browser's local storage using JavaScript. Converts a dictionary to JSON format and injects it into the local storage.</p> </li> <li> <p>getLocalStorage(): Retrieves data from the browser's local storage using JavaScript.</p> </li> <li> <p>clearLocalStorage(): Clears all data from the browser's local storage using JavaScript.</p> </li> </ul>"},{"location":"technical/webview/#delegate-methods","title":"Delegate Methods","text":"<ul> <li> <p>webView(_:didFail:withError:): Delegate method called when web view navigation fails. Prints the error message if navigation fails.</p> </li> <li> <p>webView(_:didFinish:): Delegate method called when web view finishes loading a URL. Handles necessary actions upon successful navigation.</p> </li> </ul>"},{"location":"technical/webview/#usage_1","title":"Usage","text":"<p>To use WebViewModel in a SwiftUI application, instantiate it and use its methods to interact with the embedded WKWebView.</p> <p>Example: </p> <pre><code>struct ContentView: View {\n    @StateObject private var webVM = WebViewModel()\n\n    var body: some View {\n        VStack {\n            Text(\"Current URL: \\(webVM.current_url)\")\n            Button(\"Reload\") {\n                webVM.reload()\n            }\n            Button(\"Go Back\") {\n                webVM.goBack()\n            }\n            Button(\"Get Local Storage\") {\n                webVM.getLocalStorage()\n            }\n        }\n        .onAppear {\n            // Setup initial web view configuration\n            let webView = WKWebView()\n            webVM.webView = webView\n\n            // Load initial URL\n            let initialURL = URL(string: \"https://www.example.com\")!\n            webView.load(URLRequest(url: initialURL))\n        }\n    }\n}\n</code></pre>"},{"location":"technical/webview/#considerations","title":"Considerations","text":"<ul> <li>Ensure proper handling of optional values when accessing webView property.</li> <li>Manage JavaScript interactions cautiously, especially with sensitive user data stored in local storage.</li> <li>Test thoroughly across different web scenarios to verify functionality and error handling.</li> </ul> <p>This documentation provides an overview of WebViewModel.swift, describing its purpose, properties, methods, and usage within a SwiftUI context. It outlines how to interact with web views and manage local storage effectively.</p>"},{"location":"technical/webview/#apiservice","title":"APIService","text":""},{"location":"technical/webview/#overview_2","title":"Overview","text":"<p>The Webservice.swift file encapsulates various API request functions and handles corresponding responses for the \"Cheer Supports\" application. It uses Swift's URLSession and Combine framework for asynchronous networking tasks, ensuring efficient communication with the backend services.</p>"},{"location":"technical/webview/#class_1","title":"Class","text":"<p>The APIService class contains methods for making API requests to different endpoints, processing responses, and handling errors. Each method corresponds to a specific API route within the application.</p>"},{"location":"technical/webview/#properties_1","title":"Properties","text":"<p>None.</p>"},{"location":"technical/webview/#methods_3","title":"Methods","text":"<ul> <li> <p>getUserAvatar(token:):</p> <ul> <li>Route: 195 (User information)</li> <li>Purpose: Retrieves the avatar URL for a user.</li> <li>Throws: PathError.custom, PathError.noData</li> <li>Description: Fetches user avatar details from the server using HTTP GET request and returns the avatar URL as a String.</li> </ul> </li> <li> <p>getUserProfile(token:):</p> <ul> <li>Route: 129 (User profile information)</li> <li>Purpose: Retrieves user profile information, specifically live streaming status.</li> <li>Throws: PathError.noData, PathError.invalidUrl</li> <li>Description: Sends a GET request to fetch user profile data and returns an array of Route129Response objects.</li> </ul> </li> <li> <p>getLoginDatas(email:password:completion:):</p> <ul> <li>Route: 100 (Login)</li> <li>Purpose: Performs user login and retrieves user ID, token, and nickname upon successful authentication.</li> <li>Throws: No direct throws, uses completion handler for AuthenticationError cases.</li> <li>Description: Sends a POST request with login credentials, handles the response asynchronously using URLSession, and provides results through a completion handler.</li> </ul> </li> <li> <p>checkCurrentPoint(user_id:token:):</p> <ul> <li>Route: 198 (Get user current points)</li> <li>Purpose: Retrieves the current cheer coins for a user.</li> <li>Throws: AuthenticationError.custom, PathError.noData</li> <li>Description: Sends a GET request to fetch user's current cheer coins based on user ID and token, returning the amount as a String.</li> </ul> </li> <li> <p>sendEncodedData(encoded_key:token:completion:):</p> <ul> <li>Route: 601 (Decrypt the purchase key)</li> <li>Purpose: Decrypts a purchase key for in-app payment.</li> <li>Throws: PurchaseError.invalidUrl, PurchaseError.invalidKey</li> <li>Description: Sends a POST request to decrypt an encoded key using a token, handling the response asynchronously through a completion handler.</li> </ul> </li> <li> <p>sendCheerDeductionInformations(user_id:token:quantity:price:platform:item_id:completion:):</p> <ul> <li>Route: 602 (Update the Cheer)</li> <li>Purpose: Deducts cheer points upon item purchase in the application.</li> <li>Throws: PathError.custom, PathError.noData</li> <li>Description: Sends a POST request to update cheer points deduction, handling the response asynchronously through a completion handler.</li> </ul> </li> <li> <p>deleteAccountRequest(user_id:token:):</p> <ul> <li>Route: 132 (Account deletion request)</li> <li>Purpose: Sends a request to delete a user account.</li> <li>Throws: No direct throws, prints error message for invalid API URL.</li> <li>Description: Sends a POST request to initiate an account deletion request using user ID and token.</li> </ul> </li> <li> <p>getFollowListCount(user_id:token:):</p> <ul> <li>Route: 196 (Follow list count)</li> <li>Purpose: Retrieves the count of users a particular user is following.</li> <li>Throws: PathError.custom, PathError.noData</li> <li>Description: Sends a GET request to fetch the count of users followed by a specified user, returning a Route196Response object.</li> </ul> </li> <li> <p>getLastStreaming(user_id:token:):</p> <ul> <li>Route: 603 (Last Streaming Date)</li> <li>Purpose: Retrieves the last streaming date for mission reward calculations.</li> <li>Throws: PathError.custom, PathError.noData</li> <li>Description: Sends a GET request to fetch the last streaming date of a user based on user ID and token, returning a Route603Response object.</li> </ul> </li> <li> <p>getWatchedStreams(user_id:token:):</p> <ul> <li>Route: 604 (Watched Live Streaming Dates)</li> <li>Purpose: Retrieves the list of dates a user watched live streams for future features.</li> <li>Throws: PathError.custom, PathError.noData</li> <li>Description: Sends a GET request to fetch the list of dates a user watched live streams, returning an array of Route604Response objects.</li> </ul> </li> <li> <p>getLastGiftSend(user_id:token:):</p> <ul> <li>Route: 605 (Last Gift Items)</li> <li>Purpose: Retrieves information about the last gift item sent by a user.</li> <li>Throws: PathError.custom, PathError.noData</li> <li>Description: Sends a GET request to fetch details about the last gift item sent by a user, returning a Route605Response object.</li> </ul> </li> </ul>"},{"location":"technical/webview/#considerations_1","title":"Considerations","text":"<ul> <li>Ensure proper error handling for network requests and API responses.</li> <li>Validate inputs (like tokens, IDs) before making API requests.</li> <li>Utilize async/await for asynchronous operations where supported to simplify concurrency.</li> <li>Test thoroughly across different network conditions and scenarios to ensure robustness.</li> </ul> <p>This documentation provides an overview of Webservice.swift, detailing its purpose, methods, routes, and considerations for effective usage in the \"Cheer Supports\" application.</p>"},{"location":"technical/webview/#accountserviceviewmodel","title":"AccountServiceViewModel","text":""},{"location":"technical/webview/#overview_3","title":"Overview","text":"<p>The <code>AccountServiceViewModel.swift</code> file serves as a view model in the \"Cheer Supports\" application, managing user authentication, data retrieval from APIs, and state management for user-related information. It utilizes Swift's Combine framework for reactive programming and asynchronous operations.</p>"},{"location":"technical/webview/#class_2","title":"Class","text":"<p>The <code>AccountServiceViewModel</code> class encapsulates methods and properties to facilitate user authentication, data fetching, and management of user session state.</p>"},{"location":"technical/webview/#properties_2","title":"Properties","text":"<ul> <li><code>isAuthenticated</code>: Tracks whether the user is authenticated.</li> <li><code>nick_name</code>: Stores the user's nickname.</li> <li><code>user_id</code>: Stores the user's ID.</li> <li><code>iconPath</code>: Stores the URL path for the user's avatar.</li> <li><code>email</code>: Stores the user's email address.</li> <li><code>password</code>: Stores the user's password.</li> <li><code>token</code>: Stores the authentication token for API requests.</li> <li><code>cheer</code>: Stores the user's cheer points.</li> <li><code>channel_id</code>: Stores the ID of the user's channel.</li> <li><code>follow</code>: Stores the count of users followed by the current user.</li> </ul>"},{"location":"technical/webview/#methods_4","title":"Methods","text":"<ul> <li> <p><code>login(email:password:)</code>:</p> <ul> <li>Purpose: Initiates user login using provided email and password.</li> <li>Throws: Passes errors from <code>APIService().getLoginDatas</code> method.</li> <li>Description: Asynchronously fetches user authentication data from the server and updates view model properties upon successful login.</li> </ul> </li> <li> <p><code>authenticate(email:password:)</code>:</p> <ul> <li>Purpose: Attempts user authentication and returns a boolean indicating success.</li> <li>Throws: Passes errors from <code>login(email:password:)</code> method.</li> <li>Description: Calls <code>login(email:password:)</code> and handles authentication errors, returning the current authentication state.</li> </ul> </li> <li> <p><code>getAvatar()</code>:</p> <ul> <li>Purpose: Retrieves the user's avatar URL path.</li> <li>Throws: Handles errors from <code>APIService().getUserAvatar</code> method.</li> <li>Description: Asynchronously fetches and updates <code>iconPath</code> with the user's avatar URL.</li> </ul> </li> <li> <p><code>getChannelID()</code>:</p> <ul> <li>Purpose: Placeholder method for future implementation.</li> <li>Description: Intended for retrieving the user's channel ID, not yet implemented.</li> </ul> </li> <li> <p><code>logout()</code>:</p> <ul> <li>Purpose: Logs out the user by resetting authentication-related properties.</li> <li>Description: Resets <code>isAuthenticated</code>, <code>token</code>, <code>user_id</code>, <code>email</code>, <code>password</code>, and <code>iconPath</code> properties to empty or default values.</li> </ul> </li> <li> <p><code>checkUserCheerPoints()</code>:</p> <ul> <li>Purpose: Retrieves the user's current cheer points.</li> <li>Throws: Handles errors from <code>APIService().checkCurrentPoint</code> method.</li> <li>Description: Asynchronously fetches and updates <code>cheer</code> with the user's current cheer points.</li> </ul> </li> <li> <p><code>purchaseItem(price:quantity:productName:)</code>:</p> <ul> <li>Purpose: Initiates a purchase transaction for an item.</li> <li>Parameters: <code>price</code>, <code>quantity</code>, <code>productName</code> - Details of the item to purchase.</li> <li>Description: Asynchronously deducts cheer points from the user upon item purchase and updates <code>cheer</code> accordingly.</li> </ul> </li> <li> <p><code>getFollow()</code>:</p> <ul> <li>Purpose: Retrieves the count of users followed by the current user.</li> <li>Throws: Handles errors from <code>APIService().getFollowListCount</code> method.</li> <li>Description: Asynchronously fetches and updates <code>follow</code> with the count of users followed by the current user.</li> </ul> </li> <li> <p><code>isTodayLastStreamingDate()</code>:</p> <ul> <li>Purpose: Checks if the user streamed live today.</li> <li>Throws: Handles errors from <code>APIService().getLastStreaming</code> method.</li> <li>Description: Asynchronously checks if the user's last streaming date was today using <code>isToday</code> method.</li> </ul> </li> <li> <p><code>todayWatchStreams()</code>:</p> <ul> <li>Purpose: Checks if the user watched any live stream today.</li> <li>Throws: Handles errors from <code>APIService().getWatchedStreams</code> method.</li> <li>Description: Asynchronously checks if the user watched any live stream today using <code>isToday</code> method.</li> </ul> </li> <li> <p><code>lastGift()</code>:</p> <ul> <li>Purpose: Checks if the user sent a gift today.</li> <li>Throws: Handles errors from <code>APIService().getLastGiftSend</code> method.</li> <li>Description: Asynchronously checks if the user sent a gift today using <code>isToday</code> method.</li> </ul> </li> <li> <p><code>formattedDate(jsonDate:)</code>:</p> <ul> <li>Purpose: Converts a JSON-formatted date string to a <code>Date</code> object.</li> <li>Parameters: <code>jsonDate</code> - A date string in JSON format.</li> <li>Returns: A <code>Date</code> object parsed from the <code>jsonDate</code>.</li> </ul> </li> <li> <p><code>isToday(date:)</code>:</p> <ul> <li>Purpose: Checks if a given date is today.</li> <li>Parameters: <code>date</code> - The <code>Date</code> object to check.</li> <li>Returns: <code>true</code> if the date is today; otherwise, <code>false</code>.</li> </ul> </li> <li> <p><code>isStillLiveStreamActive()</code>:</p> <ul> <li>Purpose: Checks if the user's live stream is currently active.</li> <li>Throws: Handles errors from <code>APIService().getLastStreaming</code> method.</li> <li>Description: Asynchronously checks if the user's live stream is active today using <code>isToday</code> method.</li> </ul> </li> </ul>"},{"location":"technical/webview/#usage-example","title":"Usage Example","text":"<p>Below is an example demonstrating how to use the <code>AccountServiceViewModel</code> class:</p> <pre><code>let viewModel = AccountServiceViewModel()\n\n// Example: Authenticate user\nasync {\n    do {\n        let isAuthenticated = try await viewModel.authenticate(email: \"user@example.com\", password: \"password\")\n        if isAuthenticated {\n            print(\"User is authenticated!\")\n            await viewModel.getAvatar()\n            await viewModel.checkUserCheerPoints()\n            let followCount = await viewModel.getFollow()\n            print(\"User is following \\(followCount) users.\")\n        } else {\n            print(\"Authentication failed.\")\n        }\n    } catch {\n        print(\"Error authenticating: \\(error)\")\n    }\n}\n</code></pre>"},{"location":"technical/webview/#considerations_2","title":"Considerations","text":"<ul> <li>Ensure proper error handling for asynchronous operations and API requests.</li> <li>Use Combine framework for reactive updates to UI based on state changes.</li> <li>Validate inputs (like email and password) before making API requests.</li> <li>Test thoroughly under various network conditions and scenarios to ensure reliability.</li> </ul> <p>This documentation provides an overview of <code>AccountServiceViewModel.swift</code>, detailing its purpose, methods, properties, and considerations for effective usage in the \"Cheer Supports\" application.</p>"},{"location":"technical/API/api/","title":"API's Documentation","text":"<p>This section provides a detailed overview of the related classes for an iOS app, covering API structure, endpoints, request methods, parameters, and expected responses. It includes information on accessing, updating, and retrieving data from AWS and Firebase Firestore databases, as well as authentication and error handling. For additional details or updates, refer to the AWS and Firebase Firestore documentation.</p>"},{"location":"technical/API/api/#api-structure","title":"API Structure","text":""},{"location":"technical/API/api/#base-urls","title":"Base URLs","text":"<ul> <li>AWS API Gateway: <code>https://api.cheer-supports.com/v1</code></li> <li>Firebase Firestore: <code>https://fcm.googleapis.com/v1/projects/cheer-supports-iphone/messages/</code></li> <li>GoogleAPI: <code>https://www.googleapis.com/auth/firebase.messaging</code></li> </ul>"},{"location":"technical/API/api/#aws","title":"AWS","text":"<ul> <li>Authentication Method: AWS IAM roles and policies.</li> <li>Tokens: Use AWS Cognito for obtaining JWT tokens.</li> <li>Headers: Include the <code>Authorization</code> header with the <code>Bearer</code> token.</li> </ul>"},{"location":"technical/API/api/#firebase","title":"Firebase","text":"<ul> <li>Authentication Method: Firebase Authentication (email/password, OAuth providers).</li> <li>Tokens: Use Firebase ID tokens for authorization.</li> <li>Headers: Include the <code>Authorization</code> header with <code>Bearer [ID_TOKEN]</code>.</li> </ul>"},{"location":"technical/API/api/#google","title":"Google","text":"<ul> <li>Authentication Method: Google Authentication (data, scopes).</li> <li>Tokens: Use Google API service account.</li> </ul>"},{"location":"technical/API/request/","title":"Request","text":""},{"location":"technical/API/request/#apis","title":"API's","text":"<p><code>APIService</code> provides a set of functions to interact with the Cheer Supports API, handling various routes related to user data, login, points, purchases, and more. Each function is asynchronous, using Swift's concurrency features for network operations. There are addinotial APIs beside in APIService class.</p>"},{"location":"technical/API/request/#api-endpoints","title":"API Endpoints","text":""},{"location":"technical/API/request/#get-user-avatar","title":"Get User Avatar","text":"<ul> <li>Route: <code>195</code></li> <li>Method: <code>GET</code></li> <li>URL: <code>https://api.cheer-supports.com/api/v1/user/items?type=9</code></li> <li>Parameters: <ul> <li><code>token</code> (String) - Bearer token for authentication</li> </ul> </li> </ul>"},{"location":"technical/API/request/#request","title":"Request","text":"<pre><code>func getUserAvatar(token: String) async throws -&gt; String\n</code></pre>"},{"location":"technical/API/request/#response","title":"Response","text":"<ul> <li>Success: Returns the URL of the user\u2019s avatar.</li> <li>Failure: Throws errors based on response status codes or data issues.</li> </ul>"},{"location":"technical/API/request/#error-handling","title":"Error Handling","text":"<ul> <li><code>400..500</code>: Unauthorized access</li> <li><code>500..600</code>: Server errors</li> <li><code>PathError.custom</code>: Custom error message if the response is not valid</li> </ul>"},{"location":"technical/API/request/#get-user-profile-information","title":"Get User Profile Information","text":"<ul> <li>Route: <code>129</code></li> <li>Method: <code>GET</code></li> <li>URL: <code>https://api.cheer-supports.com/api/v1/user/channel/mine</code></li> <li>Parameters:<ul> <li><code>token</code> (String) - Bearer token for authentication</li> </ul> </li> </ul>"},{"location":"technical/API/request/#request_1","title":"Request","text":"<pre><code>func getUserProfile(token: String) async throws -&gt; [Route129Response]\n</code></pre>"},{"location":"technical/API/request/#response_1","title":"Response","text":"<ul> <li>Success: Returns an array of <code>Route129Response</code> containing user profile information. Check this for more details about response.</li> <li>Failure: Throws errors based on response status codes or data issues.</li> </ul>"},{"location":"technical/API/request/#error-handling_1","title":"Error Handling","text":"<ul> <li><code>400..500</code>: Invalid URL or no data</li> <li><code>500..600</code>: Server errors</li> <li><code>PathError.custom</code>: Custom error message for server issues</li> </ul>"},{"location":"technical/API/request/#login","title":"Login","text":"<ul> <li>Route: <code>100</code></li> <li>Method: <code>POST</code></li> <li>URL: <code>https://api.cheer-supports.com/api/v1/liver/login</code></li> <li>Parameters:<ul> <li><code>email</code> (String)</li> <li><code>password</code> (String)</li> </ul> </li> </ul>"},{"location":"technical/API/request/#request_2","title":"Request","text":"<pre><code>func getLoginDatas(email: String, password: String, completion: @escaping (Result&lt;Array&lt;String&gt;, AuthenticationError&gt;) -&gt; Void)\n</code></pre>"},{"location":"technical/API/request/#response_2","title":"Response","text":"<ul> <li>Success: Array containing user ID, nickname, and token respectively.</li> <li>Failure: Throws <code>AuthenticationError</code> if login fails.</li> </ul>"},{"location":"technical/API/request/#error-handling_2","title":"Error Handling","text":"<ul> <li><code>AuthenticationError.custom</code>: URL issues</li> <li><code>AuthenticationError.invalidCredentials</code>: Invalid credentials or missing data</li> </ul>"},{"location":"technical/API/request/#check-current-points","title":"Check Current Points","text":"<ul> <li>Route: <code>198</code></li> <li>Method: <code>GET</code></li> <li>URL: <code>https://api.cheer-supports.com/api/v1/user/point?id={user_id}</code></li> <li>Parameters:<ul> <li><code>user_id</code> (String)</li> <li><code>token</code> (String)</li> </ul> </li> </ul>"},{"location":"technical/API/request/#request_3","title":"Request","text":"<pre><code>func checkCurrentPoint(user_id: String, token: String) async throws -&gt; String\n</code></pre>"},{"location":"technical/API/request/#response_3","title":"Response","text":"<ul> <li>Success: Returns the user\u2019s current points as a string.</li> <li>Failure: Throws errors based on response status codes or data issues.</li> </ul>"},{"location":"technical/API/request/#error-handling_3","title":"Error Handling","text":"<ul> <li><code>400..500</code>: Invalid URL</li> <li><code>500..600</code>: Server errors</li> <li><code>PathError.custom</code>: Custom error message for server issues</li> </ul>"},{"location":"technical/API/request/#decrypt-purchase-key","title":"Decrypt Purchase Key","text":"<ul> <li>Route: <code>601</code></li> <li>Method: <code>POST</code></li> <li>URL: <code>https://api.cheer-supports.com/api/v1/app/purchase/key/decrypt?encodedkey={encoded_key}</code></li> <li>Parameters:<ul> <li><code>encoded_key</code> (String)</li> <li><code>token</code> (String)</li> </ul> </li> </ul>"},{"location":"technical/API/request/#request_4","title":"Request","text":"<pre><code>func sendEncodedData(encoded_key: String, token: String, completion: @escaping (Result&lt;String, PurchaseError&gt;) -&gt; Void)\n</code></pre>"},{"location":"technical/API/request/#response_4","title":"Response","text":"<ul> <li>Success: Returns decrypted message.</li> <li>Failure: Throws <code>PurchaseError</code> for issues with the key or decoding.</li> </ul>"},{"location":"technical/API/request/#error-handling_4","title":"Error Handling","text":"<ul> <li><code>PurchaseError.invalidUrl</code>: URL issues</li> <li><code>PurchaseError.invalidKey</code>: Invalid key or decoding issues</li> </ul>"},{"location":"technical/API/request/#deduct-cheer","title":"Deduct Cheer","text":"<ul> <li>Route: <code>602</code></li> <li>Method: <code>POST</code></li> <li>URL: <code>https://api.cheer-supports.com/api/v1/app/cheer/deduct</code></li> <li>Parameters:<ul> <li><code>user_id</code> (String)</li> <li><code>quantity</code> (Int)</li> <li><code>price</code> (Int)</li> <li><code>platform</code> (String)</li> <li><code>item_id</code> (String)</li> <li><code>token</code> (String)</li> </ul> </li> </ul>"},{"location":"technical/API/request/#request_5","title":"Request","text":"<pre><code>func sendCheerDeductionInformations(user_id: String, token: String, quantity: Int, price: Int, platform: String, item_id: String, completion: @escaping (Result&lt;Route602Response, PathError&gt;) -&gt; Void)\n</code></pre>"},{"location":"technical/API/request/#response_5","title":"Response","text":"<ul> <li>Success: Returns <code>Route602Response</code> with deduction details. Check this for more details. </li> <li>Failure: Throws <code>PathError</code> for issues with request or response.</li> </ul>"},{"location":"technical/API/request/#error-handling_5","title":"Error Handling","text":"<ul> <li><code>PathError.custom</code>: URL issues</li> <li><code>PathError.noData</code>: No data returned</li> <li><code>PathError.decodingError</code>: Decoding issues</li> </ul>"},{"location":"technical/API/request/#delete-account-request","title":"Delete Account Request","text":"<ul> <li>Route: <code>132</code></li> <li>Method: <code>POST</code></li> <li>URL: <code>https://api.cheer-supports.com/api/v1/contact</code></li> <li>Parameters:<ul> <li><code>user_id</code> (String)</li> <li><code>token</code> (String)</li> </ul> </li> </ul>"},{"location":"technical/API/request/#request_6","title":"Request","text":"<pre><code>func deleteAccountRequest(user_id: String, token: String)\n</code></pre>"},{"location":"technical/API/request/#response_6","title":"Response","text":"<ul> <li>Success: No explicit response. Account deletion request is submitted.</li> <li>Failure: Logs error if URL is invalid.</li> </ul>"},{"location":"technical/API/request/#error-handling_6","title":"Error Handling","text":"<ul> <li>Logs error for invalid URL</li> </ul>"},{"location":"technical/API/request/#get-follow-list-count","title":"Get Follow List Count","text":"<ul> <li>Route: <code>196</code></li> <li>Method: <code>GET</code></li> <li>URL: <code>https://api.cheer-supports.com/api/v1/liver/follow?user_id={user_id}</code></li> <li>Parameters:<ul> <li><code>user_id</code> (String)</li> <li><code>token</code> (String)</li> </ul> </li> </ul>"},{"location":"technical/API/request/#request_7","title":"Request","text":"<pre><code>func getFollowListCount(user_id: String, token: String) async throws -&gt; Route196Response\n</code></pre>"},{"location":"technical/API/request/#response_7","title":"Response","text":"<ul> <li>Success: Returns <code>Route196Response</code> with follow list count. Check this for more details.</li> <li>Failure: Throws errors based on response status codes or data issues.</li> </ul>"},{"location":"technical/API/request/#error-handling_7","title":"Error Handling","text":"<ul> <li><code>400..500</code>: Invalid URL</li> <li><code>500..600</code>: Server errors</li> <li><code>PathError.custom</code>: Custom error message for server issues</li> </ul>"},{"location":"technical/API/request/#get-last-streaming-date","title":"Get Last Streaming Date","text":"<ul> <li>Route: <code>603</code></li> <li>Method: <code>GET</code></li> <li>URL: <code>https://api.cheer-supports.com/api/v1/channel/streaming/date/{user_id}</code></li> <li>Parameters:<ul> <li><code>user_id</code> (String)</li> <li><code>token</code> (String)</li> </ul> </li> </ul>"},{"location":"technical/API/request/#request_8","title":"Request","text":"<pre><code>func getLastStreaming(user_id: String, token: String) async throws -&gt; Route603Response\n</code></pre>"},{"location":"technical/API/request/#response_8","title":"Response","text":"<ul> <li>Success: Returns <code>Route603Response</code> with last streaming date. Check this for more details.</li> <li>Failure: Throws errors based on response status codes or data issues.</li> </ul>"},{"location":"technical/API/request/#error-handling_8","title":"Error Handling","text":"<ul> <li><code>400..500</code>: Invalid URL</li> <li><code>500..600</code>: Server errors</li> <li><code>PathError.custom</code>: Custom error message for server issues</li> </ul>"},{"location":"technical/API/request/#get-watched-streams","title":"Get Watched Streams","text":"<ul> <li>Route: <code>604</code></li> <li>Method: <code>GET</code></li> <li>URL: <code>https://api.cheer-supports.com/api/v1/channel/watch/streaming/{user_id}</code></li> <li>Parameters:<ul> <li><code>user_id</code> (String)</li> <li><code>token</code> (String)</li> </ul> </li> </ul>"},{"location":"technical/API/request/#request_9","title":"Request","text":"<pre><code>func getWatchedStreams(user_id: String, token: String) async throws -&gt; [Route604Response]\n</code></pre>"},{"location":"technical/API/request/#response_9","title":"Response","text":"<ul> <li>Success: Returns an array of <code>Route604Response</code> with watched streams.Check this for more details.</li> <li>Failure: Throws errors based on response status codes or data issues.</li> </ul>"},{"location":"technical/API/request/#error-handling_9","title":"Error Handling","text":"<ul> <li><code>400..500</code>: Invalid URL</li> <li><code>500..600</code>: Server errors</li> <li><code>PathError.custom</code>: Custom error message for server issues</li> </ul>"},{"location":"technical/API/request/#get-last-gift-sent","title":"Get Last Gift Sent","text":"<ul> <li>Route: <code>605</code></li> <li>Method: <code>GET</code></li> <li>URL: <code>https://api.cheer-supports.com/api/v1/yell/info/get/{user_id}</code></li> <li>Parameters:<ul> <li><code>user_id</code> (String)</li> <li><code>token</code> (String)</li> </ul> </li> </ul>"},{"location":"technical/API/request/#request_10","title":"Request","text":"<pre><code>func getLastGiftSend(user_id: String, token: String) async throws -&gt; Route605Response\n</code></pre>"},{"location":"technical/API/request/#response_10","title":"Response","text":"<ul> <li>Success: Returns <code>Route605Response</code> with last gift sent details.Check this for more details.</li> <li>Failure: Throws errors based on response status codes or data issues.</li> </ul>"},{"location":"technical/API/request/#error-handling_10","title":"Error Handling","text":"<ul> <li><code>400..500</code>: Invalid URL</li> <li><code>500..600</code>: Server errors</li> <li><code>PathError.custom</code>: Custom error message for server issues</li> </ul>"},{"location":"technical/API/request/#firebase-apis-endpoints","title":"Firebase API's Endpoints","text":"<p>This function is in the <code>NotificationManager</code> observable script. This class is a <code>@MainActor</code> class so functions in this class take precedence over class functions. 2 api handled it by NotificationManager </p>"},{"location":"technical/API/request/#sendmessagetodevice","title":"<code>sendMessageToDevice()</code>","text":"<p>The <code>sendMessageToDevice</code> function is designed to send push notifications to all devices subscribed to the \"ios_platform\" topic using Firebase Cloud Messaging (FCM). It constructs and sends a notification payload to FCM's messaging endpoint. </p>"},{"location":"technical/API/request/#function-signature","title":"Function Signature","text":"<pre><code>func sendMessageToDevice(msg: String, title: String) async throws\n</code></pre>"},{"location":"technical/API/request/#parameters","title":"Parameters","text":"<ul> <li><code>msg</code> (<code>String</code>): The message body of the notification.</li> <li><code>title</code> (<code>String</code>): The title of the notification.</li> </ul>"},{"location":"technical/API/request/#endpoint","title":"Endpoint","text":"<ul> <li>URL: <code>https://fcm.googleapis.com/v1/projects/cheer-supports-iphone/messages:send</code></li> <li>Method: <code>POST</code></li> </ul>"},{"location":"technical/API/request/#request-headers","title":"Request Headers","text":"<ul> <li>Content-Type: <code>application/json</code></li> <li>Authorization: <code>Bearer &lt;accessToken&gt;</code></li> </ul>"},{"location":"technical/API/request/#request-body","title":"Request Body","text":"<p>The request body is a JSON object with the following structure:</p> <pre><code>{\n  \"message\": {\n    \"topic\": \"ios_platform\",\n    \"notification\": {\n      \"body\": \"&lt;msg&gt;\",\n      \"title\": \"&lt;title&gt;\"\n    },\n    \"apns\": {\n      \"headers\": {\n        \"apns-priority\": \"10\"\n      },\n      \"payload\": {\n        \"aps\": {\n          \"alert\": {\n            \"title\": \"&lt;title&gt;\",\n            \"loc-key\": \"&lt;msg&gt;\"\n          },\n          \"sound\": \"default\"\n        }\n      }\n    }\n  }\n}\n</code></pre> <ol> <li>Access Token Retrieval: The function retrieves an access token using <code>self.getAccessToken()</code>. This token is used to authorize the request to FCM.</li> <li>JSON Payload Construction: Constructs a JSON payload with the message and notification details.</li> <li>HTTP Request Setup: Configures the HTTP request with the necessary headers and body.</li> <li>Sending Request: Sends the notification via <code>URLSession.shared.dataTask</code>.</li> </ol>"},{"location":"technical/API/request/#error-handling_11","title":"Error Handling","text":"<ul> <li>Network Errors: Any network or request errors are logged to the console.</li> <li>Response Handling: Logs the response if available. The code snippet that handles response status codes is commented out but can be used for further error handling.</li> </ul> <p>For more details about FCM and its notification payload structure, refer to the Firebase Cloud Messaging Documentation.</p>"},{"location":"technical/API/request/#updateaccesstoken","title":"<code>updateAccessToken()</code>","text":"<p>The <code>updateAccessToken()</code> function asynchronously retrieves a new API access token using a service account. This function is used to refresh or obtain a new token that grants access to various services and APIs.</p>"},{"location":"technical/API/request/#method-declaration","title":"Method Declaration","text":"<pre><code>func updateAccessToken() async\n</code></pre>"},{"location":"technical/API/request/#description","title":"Description","text":"<p>This method performs the following steps:</p> <ol> <li>Defines the scope required for the API access.</li> <li>Prepares the service account credentials in JSON format.</li> <li>Initializes a <code>ServiceAccountTokenProvider</code> with the credentials and scope.</li> <li>Attempts to obtain an access token.</li> <li>Updates the <code>accessToken</code> property with the new token if successful, or logs any errors encountered.</li> </ol>"},{"location":"technical/API/request/#parameters_1","title":"Parameters","text":"<p>This function does not take any parameters.</p>"},{"location":"technical/API/request/#return-type","title":"Return Type","text":"<p>This function does not return any value.</p>"},{"location":"technical/API/request/#detailed-steps","title":"Detailed Steps","text":"<p>Define Scope and Credentials:</p> <ul> <li><code>scope</code>: An array of strings specifying the scopes needed.</li> <li><code>json</code>: An array containing the service account credentials in JSON format.</li> </ul> <p>Serialize JSON Data:</p> <ul> <li>Convert the <code>json</code> object to <code>Data</code> using <code>JSONSerialization</code>.</li> </ul> <p>Initialize Token Provider:</p> <ul> <li>Create an instance of <code>ServiceAccountTokenProvider</code> with the JSON data and scope.</li> </ul> <p>Obtain Access Token:</p> <ul> <li>Call the <code>withToken</code> method on the <code>client</code> instance.</li> <li>Handle any errors encountered during the token retrieval.</li> </ul> <p>Update Token:</p> <ul> <li>If no errors are encountered, update the <code>accessToken</code> property with the new token.</li> </ul> <p>Error Handling:</p> <ul> <li>Print error messages if exceptions occur during JSON serialization or token retrieval.</li> </ul>"},{"location":"technical/API/request/#error-handling_12","title":"Error Handling","text":"<p>JSON Serialization Errors:</p> <ul> <li>Errors during the conversion of the JSON object to <code>Data</code> are caught and logged.</li> </ul> <p>Token Retrieval Errors:</p> <ul> <li>Errors encountered while retrieving the token are handled within the completion handler of <code>withToken</code>.</li> </ul>"},{"location":"technical/API/request/#notes","title":"Notes","text":"<ul> <li>The <code>accessToken</code> property should be declared in the class where this function is used.</li> <li>Ensure that the <code>ServiceAccountTokenProvider</code> and its methods (e.g., <code>withToken</code>) are correctly implemented and handle tokens as expected.</li> <li>The <code>scope</code> and <code>json</code> variables need to be properly configured based on the specific API requirements and service account credentials.</li> </ul>"},{"location":"technical/API/request/#dependencies","title":"Dependencies","text":"<ul> <li>Ensure you have the necessary imports and dependencies for handling JSON serialization and asynchronous tasks.</li> <li>The <code>ServiceAccountTokenProvider</code> class must be correctly defined and accessible within your project.</li> </ul>"},{"location":"technical/API/request/#serviceaccounttokenprovider","title":"ServiceAccountTokenProvider","text":"<p>The <code>ServiceAccountTokenProvider</code> class is used to manage and provide OAuth 2.0 tokens for service accounts. It constructs and sends a JWT (JSON Web Token) to the OAuth 2.0 token endpoint to obtain an access token. This class relies on service account credentials and RSA private keys for authentication.</p>"},{"location":"technical/API/request/#class-serviceaccounttokenprovider","title":"Class: <code>ServiceAccountTokenProvider</code>","text":""},{"location":"technical/API/request/#properties","title":"Properties","text":"<ul> <li><code>token</code> (<code>Token?</code>): Optional property to hold the token object once it's retrieved.</li> <li><code>credentials</code> (<code>ServiceAccountCredentials</code>): Holds the service account credentials.</li> <li><code>scopes</code> (<code>[String]</code>): The scopes required for the token.</li> <li><code>rsaKey</code> (<code>RSAKey</code>): RSA key used to sign the JWT.</li> </ul>"},{"location":"technical/API/request/#initializers","title":"Initializers","text":"<p><code>init?(credentialsData: Data, scopes: [String])</code></p> <p>Initializes the provider with service account credentials and required scopes.</p> <p>Parameters:</p> <ul> <li><code>credentialsData</code>: Data containing the service account credentials in JSON format.</li> <li><code>scopes</code>: Array of strings representing the scopes required for the token.</li> </ul> <p>Returns:</p> <ul> <li>An optional <code>ServiceAccountTokenProvider</code> instance.</li> </ul> <p><code>init?(credentialsURL: URL, scopes: [String])</code></p> <p>Initializes the provider with service account credentials loaded from a URL and required scopes.</p> <p>Parameters:</p> <ul> <li><code>credentialsURL</code>: URL pointing to a JSON file containing the service account credentials.</li> <li><code>scopes</code>: Array of strings representing the scopes required for the token.</li> </ul> <p>Returns:</p> <ul> <li>An optional <code>ServiceAccountTokenProvider</code> instance.</li> </ul>"},{"location":"technical/API/request/#methods","title":"Methods","text":"<p><code>withToken(_ callback: @escaping (Token?, Error?) -&gt; Void) throws</code></p> <p>Requests a new OAuth 2.0 token by sending a JWT to the token endpoint.</p> <p>Parameters:</p> <ul> <li><code>callback</code>: A closure that is called with the resulting token or an error.</li> </ul> <p>Throws:</p> <ul> <li>Errors may be thrown during JWT encoding or HTTP request execution.</li> </ul> <p>Returns:</p> <ul> <li>This method does not return a value directly. Instead, the result is passed to the callback.</li> </ul>"},{"location":"technical/API/request/#internal-structures","title":"Internal Structures","text":""},{"location":"technical/API/request/#serviceaccountcredentials","title":"<code>ServiceAccountCredentials</code>","text":"<p>Represents the service account credentials required for authentication.</p> <p>Properties:</p> <ul> <li><code>CredentialType</code>: Type of credential (e.g., \"service_account\").</li> <li><code>ProjectId</code>: Google Cloud project ID.</li> <li><code>PrivateKeyId</code>: ID of the private key.</li> <li><code>PrivateKey</code>: The private key used to sign the JWT.</li> <li><code>ClientEmail</code>: Email associated with the service account.</li> <li><code>ClientID</code>: Client ID for the service account.</li> <li><code>AuthURI</code>: URI for authentication.</li> <li><code>TokenURI</code>: URI for token exchange.</li> <li><code>AuthProviderX509CertURL</code>: URL for the authentication provider's X.509 certificate.</li> <li><code>ClientX509CertURL</code>: URL for the client's X.509 certificate.</li> </ul> <p>Coding Keys:</p> <ul> <li>Mapped to JSON fields in the service account credentials JSON.</li> </ul> <p>For further details about JWT, OAuth 2.0, and service account credentials, refer to the Google Cloud documentation and JWT specifications.</p>"},{"location":"technical/API/request/#error-types","title":"Error Types","text":""},{"location":"technical/API/request/#path-error","title":"Path Error","text":"<ul> <li><code>custom(errorMessage: String)</code>: Custom error with a message</li> <li><code>noData</code>: No data received from the server</li> <li><code>invalidUrl</code>: Invalid URL or endpoint</li> <li><code>decodingError</code>: Error decoding the response</li> </ul>"},{"location":"technical/API/request/#authentication-error","title":"Authentication Error","text":"<ul> <li><code>custom(errorMessage: String)</code>: Custom authentication error</li> <li><code>invalidCredentials</code>: Invalid credentials provided</li> </ul>"},{"location":"technical/API/request/#purchase-error","title":"Purchase Error","text":"<ul> <li><code>invalidUrl</code>: Invalid URL for purchase decryption</li> <li><code>invalidKey</code>: Invalid key provided</li> <li><code>decoding_error</code>: Error decoding the decryption response</li> </ul>"},{"location":"technical/API/response/","title":"Response","text":""},{"location":"technical/API/response/#api-response","title":"API Response","text":"<p>This documentation covers the data structures and error handling used for interacting with the Cheer Supports API.</p>"},{"location":"technical/API/response/#error-handling","title":"Error Handling","text":""},{"location":"technical/API/response/#authenticationerror","title":"AuthenticationError","text":"<ul> <li>invalidCredentials: Indicates that the provided credentials are invalid.</li> <li>custom(errorMessage: String): Custom error with a specific error message.</li> </ul>"},{"location":"technical/API/response/#patherror","title":"PathError","text":"<ul> <li>invalidUrl: The URL used in the request is invalid.</li> <li>noData: No data was received in the response.</li> <li>nullAvatar: The avatar data is null or not available.</li> <li>decodingError: Error occurred while decoding the response data.</li> <li>custom(errorMessage: String): Custom error with a specific error message.</li> </ul>"},{"location":"technical/API/response/#purchaseerror","title":"PurchaseError","text":"<ul> <li>invalidUrl: The URL used for the purchase request is invalid.</li> <li>invalidKey: The provided key is invalid.</li> <li>unauthorized: Unauthorized access error.</li> <li>post_request_error: Error occurred during the POST request.</li> <li>decoding_error: Error occurred while decoding the response data.</li> <li>custom(errorMessage: String): Custom error with a specific error message.</li> </ul>"},{"location":"technical/API/response/#deletion","title":"Deletion","text":"<ul> <li>invalidCredentials: Invalid credentials provided for account deletion.</li> <li>unauthorized: Unauthorized access error for account deletion.</li> <li>custom(errorMessage: String): Custom error with a specific error message.</li> </ul>"},{"location":"technical/API/response/#api-request-body-structures","title":"API Request Body Structures","text":""},{"location":"technical/API/response/#loginrequestbody","title":"LoginRequestBody","text":"<pre><code>struct LoginRequestBody: Codable {\n    let email: String\n    let password: String\n}\n</code></pre> <ul> <li>email: The user's email address.</li> <li>password: The user's password.</li> </ul>"},{"location":"technical/API/response/#route602requestbody","title":"Route602RequestBody","text":"<pre><code>struct Route602RequestBody: Codable {\n    let user_id: String\n    let quantity: Int\n    let price: Int\n    let platform: String\n    let item_id: String\n}\n</code></pre> <ul> <li>user_id: The ID of the user.</li> <li>quantity: The quantity of the item.</li> <li>price: The price of the item.</li> <li>platform: The platform on which the transaction is made.</li> <li>item_id: The ID of the item.</li> </ul>"},{"location":"technical/API/response/#route132deletionrequestbody","title":"Route132DeletionRequestBody","text":"<pre><code>struct Route132DeletionRequestBody: Codable {\n    let user_id: String\n    let category: Int\n    let content: String\n    let language: String\n}\n</code></pre> <ul> <li>user_id: The ID of the user requesting deletion.</li> <li>category: The category of the deletion request.</li> <li>content: The content of the deletion request.</li> <li>language: The language of the request.</li> </ul>"},{"location":"technical/API/response/#api-response-data-structures","title":"API Response Data Structures","text":""},{"location":"technical/API/response/#route100response","title":"Route100Response","text":"<pre><code>struct Route100Response: Codable {\n    let token: String?\n    let user_id: Int?\n    let handle_name: String?\n    let nick_name: String?\n    let callback_url: String?\n    let offer_is_enabled: Bool?\n    let message: String?\n    let success: Bool?\n}\n</code></pre> <ul> <li>token: Authentication token for the user.</li> <li>user_id: The ID of the user.</li> <li>handle_name: The handle name of the user.</li> <li>nick_name: The nickname of the user.</li> <li>callback_url: URL to redirect after login.</li> <li>offer_is_enabled: Indicates if offers are enabled for the user.</li> <li>message: Response message.</li> <li>success: Indicates if the login was successful.</li> </ul>"},{"location":"technical/API/response/#usercoins","title":"UserCoins","text":"<pre><code>struct UserCoins: Codable {\n    let amount: String?\n}\n</code></pre> <ul> <li>amount: The amount of cheer coins the user has.</li> </ul>"},{"location":"technical/API/response/#route129response","title":"Route129Response","text":"<pre><code>struct Route129Response: Codable {\n    let id, userID: Int\n    let sessionID: String\n    let categoryID: Int\n    let offerID, giftCategoryID: Int?\n    let liveStartAt: String?\n    let liveEndAt: String?\n    let status, publishType: String\n    let banFlag: Int\n    let hash: String\n    let scheduledDatetime: String?\n    let scheduledComment: String?\n    let subscriberCount: Int\n    let createdAt, updatedAt: String?\n    let deletedAt: String?\n\n    enum CodingKeys: String, CodingKey {\n        case id\n        case userID = \"user_id\"\n        case sessionID = \"session_id\"\n        case categoryID = \"category_id\"\n        case offerID = \"offer_id\"\n        case giftCategoryID = \"gift_category_id\"\n        case liveStartAt = \"live_start_at\"\n        case liveEndAt = \"live_end_at\"\n        case status = \"status\"\n        case publishType = \"publish_type\"\n        case banFlag = \"ban_flag\"\n        case hash = \"hash\"\n        case scheduledDatetime = \"scheduled_datetime\"\n        case scheduledComment = \"scheduled_comment\"\n        case subscriberCount = \"subscriber_count\"\n        case createdAt = \"created_at\"\n        case updatedAt = \"updated_at\"\n        case deletedAt = \"deleted_at\"\n    }\n}\n</code></pre> <ul> <li>id: The ID of the response.</li> <li>userID: The ID of the user.</li> <li>sessionID: The session ID of the stream.</li> <li>categoryID: The category ID of the stream.</li> <li>offerID: The offer ID associated with the stream.</li> <li>giftCategoryID: The gift category ID.</li> <li>liveStartAt: The start time of the live stream.</li> <li>liveEndAt: The end time of the live stream.</li> <li>status: The status of the stream.</li> <li>publishType: The type of publication.</li> <li>banFlag: Flag indicating if the user is banned.</li> <li>hash: Hash value associated with the stream.</li> <li>scheduledDatetime: The scheduled datetime of the stream.</li> <li>scheduledComment: The comment scheduled for the stream.</li> <li>subscriberCount: The number of subscribers.</li> <li>createdAt: The creation time of the stream.</li> <li>updatedAt: The last update time of the stream.</li> <li>deletedAt: The deletion time of the stream.</li> </ul>"},{"location":"technical/API/response/#route143response","title":"Route143Response","text":"<pre><code>struct Route143Response: Codable {\n    let id: Int\n    let userID: Int\n    let type: String\n    let fileName: String\n    let filePath: String\n    let originalName: String\n\n    enum CodingKeys: String, CodingKey {\n        case id\n        case userID = \"user_id\"\n        case type\n        case fileName = \"file_name\"\n        case filePath = \"file_path\"\n        case originalName = \"original_name\"\n    }\n}\n</code></pre> <ul> <li>id: The ID of the file.</li> <li>userID: The ID of the user.</li> <li>type: The type of the file.</li> <li>fileName: The name of the file.</li> <li>filePath: The path of the file.</li> <li>originalName: The original name of the file.</li> </ul>"},{"location":"technical/API/response/#route195response","title":"Route195Response","text":"<pre><code>struct Route195Response: Codable {\n    let liverData: Liver?\n    let userData: User?\n    let channelData: Channel?\n    let followID: Int?\n    let liverCheck: [Int]?\n    let id: Int\n\n    enum CodingKeys: String, CodingKey {\n        case liverData = \"liver_data\"\n        case userData = \"user_data\"\n        case channelData = \"channel_data\"\n        case followID = \"follow_id\"\n        case liverCheck = \"liver_check\"\n        case id\n    }\n}\n</code></pre> <ul> <li>liverData: Data related to the liver.</li> <li>userData: Data related to the user.</li> <li>channelData: Data related to the channel.</li> <li>followID: The ID of the follow relationship.</li> <li>liverCheck: Array of liver check IDs.</li> <li>id: The ID of the response.</li> </ul>"},{"location":"technical/API/response/#liver","title":"Liver","text":"<pre><code>struct Liver: Codable {\n    let id, userID: Int\n    let categoryID: Int?\n    let profileIsVisible: Int?\n    let userOption: Int?\n    let profile: String?\n    let liverGroupID: Int?\n    let liverGroupDeletedAt: String?\n    let backgroundPath: String?\n    let iconPath: String?\n\n    enum CodingKeys: String, CodingKey {\n        case id\n        case userID = \"user_id\"\n        case categoryID = \"category_id\"\n        case profileIsVisible = \"profile_is_visible\"\n        case userOption = \"user_option\"\n        case profile\n        case liverGroupID = \"liver_group_id\"\n        case liverGroupDeletedAt = \"liver_group_deleted_at\"\n        case backgroundPath = \"background_path\"\n        case iconPath = \"icon_path\"\n    }\n}\n</code></pre> <ul> <li>id: The ID of the liver.</li> <li>userID: The ID of the user associated with the liver.</li> <li>categoryID: The category ID of the liver.</li> <li>profileIsVisible: Indicates if the profile is visible.</li> <li>userOption: User options related to the liver.</li> <li>profile: The profile of the liver.</li> <li>liverGroupID: The liver group ID.</li> <li>liverGroupDeletedAt: Timestamp when the liver group was deleted.</li> <li>backgroundPath: The path to the background image.</li> <li>iconPath: The path to the icon image.</li> </ul>"},{"location":"technical/API/response/#user","title":"User","text":"<pre><code>struct User: Codable {\n    let id: Int\n    let nickName: String?\n    let currentPiyo, user\n\nOption: Int?\n    let totalRanking: Int?\n    let cheerTotal, cheerSendTotal, piyoCount, likeCount: Int?\n    let followCount, followerCount: Int?\n\n    enum CodingKeys: String, CodingKey {\n        case id\n        case nickName = \"nick_name\"\n        case currentPiyo = \"current_piyo\"\n        case userOption = \"user_option\"\n        case totalRanking = \"total_ranking\"\n        case cheerTotal = \"cheer_total\"\n        case cheerSendTotal = \"cheer_send_total\"\n        case piyoCount = \"piyo_count\"\n        case likeCount = \"like_count\"\n        case followCount = \"follow_count\"\n        case followerCount = \"follower_count\"\n    }\n}\n</code></pre> <ul> <li>id: The ID of the user.</li> <li>nickName: The nickname of the user.</li> <li>currentPiyo: The current piyo count.</li> <li>userOption: User options.</li> <li>totalRanking: The total ranking of the user.</li> <li>cheerTotal: The total number of cheers.</li> <li>cheerSendTotal: The total number of cheers sent.</li> <li>piyoCount: The piyo count.</li> <li>likeCount: The like count.</li> <li>followCount: The follow count.</li> <li>followerCount: The follower count.</li> </ul>"},{"location":"technical/API/response/#channel","title":"Channel","text":"<pre><code>struct Channel: Codable {\n    let id: Int\n    let status: String?\n    let scheduledDatetime: String?\n    let scheduledComment: String?\n    let sessionID: String?\n    let giftCategoryID: Int?\n    let channelDeliveryID: Int?\n\n    enum CodingKeys: String, CodingKey {\n        case id\n        case status\n        case scheduledDatetime = \"scheduled_datetime\"\n        case scheduledComment = \"scheduled_comment\"\n        case sessionID = \"session_id\"\n        case giftCategoryID = \"gift_category_id\"\n        case channelDeliveryID = \"channel_delivery_id\"\n    }\n}\n</code></pre> <ul> <li>id: The ID of the channel.</li> <li>status: The status of the channel.</li> <li>scheduledDatetime: The scheduled datetime for the channel.</li> <li>scheduledComment: The scheduled comment for the channel.</li> <li>sessionID: The session ID associated with the channel.</li> <li>giftCategoryID: The ID of the gift category.</li> <li>channelDeliveryID: The ID of the channel delivery.</li> </ul>"},{"location":"technical/API/response/#route196response","title":"Route196Response","text":"<pre><code>struct Route196Response: Codable {\n    let totalCount: Int?\n    let livers: [Liver_196]\n\n    enum CodingKeys: String, CodingKey {\n        case totalCount = \"total_count\"\n        case livers\n    }\n}\n\nstruct Liver_196: Codable {\n    let liverID, userOption, userID, channelID: Int?\n    let categoryID: Int?\n    let nickName: String?\n    let profile: String?\n    let status: String?\n    let scheduledDatetime, scheduledComment, subscriberCount: String?\n    let cheerTotal, followerCount, followCount, followID: Int?\n    let isFollowed: Bool?\n    let headerPath, iconPath: String?\n\n    enum CodingKeys: String, CodingKey {\n        case liverID = \"liver_id\"\n        case userOption = \"user_option\"\n        case userID = \"user_id\"\n        case channelID = \"channel_id\"\n        case categoryID = \"category_id\"\n        case nickName = \"nick_name\"\n        case profile\n        case status\n        case scheduledDatetime = \"scheduled_datetime\"\n        case scheduledComment = \"scheduled_comment\"\n        case subscriberCount = \"subscriber_count\"\n        case cheerTotal = \"cheer_total\"\n        case followerCount = \"follower_count\"\n        case followCount = \"follow_count\"\n        case followID = \"follow_id\"\n        case isFollowed = \"is_followed\"\n        case headerPath = \"header_path\"\n        case iconPath = \"icon_path\"\n    }\n}\n</code></pre> <ul> <li>totalCount: The total count of livers.</li> <li>livers: Array of liver data.</li> </ul>"},{"location":"technical/API/response/#liver_196","title":"Liver_196","text":"<ul> <li>liverID: The ID of the liver.</li> <li>userOption: User options.</li> <li>userID: The ID of the user.</li> <li>channelID: The ID of the channel.</li> <li>categoryID: The category ID.</li> <li>nickName: The nickname of the liver.</li> <li>profile: The profile of the liver.</li> <li>status: The status of the liver.</li> <li>scheduledDatetime: The scheduled datetime.</li> <li>scheduledComment: The scheduled comment.</li> <li>subscriberCount: The number of subscribers.</li> <li>cheerTotal: The total number of cheers.</li> <li>followerCount: The number of followers.</li> <li>followCount: The number of follows.</li> <li>followID: The ID of the follow relationship.</li> <li>isFollowed: Indicates if the liver is followed.</li> <li>headerPath: The path to the header image.</li> <li>iconPath: The path to the icon image.</li> </ul>"},{"location":"technical/API/response/#route602response","title":"Route602Response","text":"<pre><code>struct Route602Response: Codable {\n    let current_point: Int?\n    let user_id: Int?\n}\n</code></pre> <ul> <li>current_point: The current points of the user.</li> <li>user_id: The ID of the user.</li> </ul>"},{"location":"technical/API/response/#route603response","title":"Route603Response","text":"<pre><code>struct Route603Response: Codable {\n    let liveStart: String\n    let liveEnd: String\n\n    enum CodingKeys: String, CodingKey {\n        case liveStart = \"live_start_at\"\n        case liveEnd = \"live_end_at\"\n    }\n}\n</code></pre> <ul> <li>liveStart: The start time of the live stream.</li> <li>liveEnd: The end time of the live stream.</li> </ul>"},{"location":"technical/API/response/#route604response","title":"Route604Response","text":"<pre><code>struct Route604Response: Codable {\n    let subscribe_start: String\n    let subscribe_end: String\n\n    enum CodingKeys: String, CodingKey {\n        case subscribe_start = \"subscribe_start_at\"\n        case subscribe_end = \"subscribe_end_at\"\n    }\n}\n</code></pre> <ul> <li>subscribe_start: The start time of the subscription.</li> <li>subscribe_end: The end time of the subscription.</li> </ul>"},{"location":"technical/API/response/#route605response","title":"Route605Response","text":"<pre><code>struct Route605Response: Codable {\n    let gift_id: Int\n    let receiver_id: Int\n    let created: String\n\n    enum CodingKeys: String, CodingKey {\n        case gift_id\n        case receiver_id = \"userId_recieved_gift\"\n        case created = \"created_at\"\n    }\n}\n</code></pre> <ul> <li>gift_id: The ID of the gift.</li> <li>receiver_id: The ID of the user who received the gift.</li> <li>created: The timestamp when the gift was created.</li> </ul>"},{"location":"technical/databases/databases/","title":"Databases","text":"<p>This application utilizes two hosting database platforms:</p>"},{"location":"technical/databases/databases/#aws-database","title":"AWS Database","text":"<p>The MySQL database is hosted on AWS and is primarily used for managing web content. The database includes the following tables:</p> <ul> <li>in_app_purchases: Stores information related to in-app purchases.</li> <li>in_app_item_purchases: Tracks individual item purchases within the application.</li> </ul> <p>Only these two tables are created specifically for the application. Additionally, data from the following tables are utilized for various features:</p> <ul> <li>Users</li> <li>Livers</li> <li>Channels</li> <li>follows</li> <li>user_own_item</li> </ul> <p>For further details, please refer to the web content documentation.</p>"},{"location":"technical/databases/databases/#modules","title":"Modules","text":""},{"location":"technical/databases/databases/#tables","title":"Tables","text":""},{"location":"technical/databases/databases/#users","title":"users","text":"<ul> <li>id: INTEGER (Primary Key)</li> <li>nick_name: VARCHAR</li> <li>current_point: DECIMAL -&gt; Description: Cheer Coins Value</li> </ul> <p>Description: Stores user informations. The <code>users</code> table contains additional data values not directly related to the application. For more detailed information, please refer to the official website documentation.</p>"},{"location":"technical/databases/databases/#livers","title":"livers","text":"<ul> <li>id: INTEGER (Primary Key)</li> <li>user_id: INTEGER -&gt; Foreign Key Reference: <code>users.id</code></li> </ul> <p>Description: Stores information about live streamers (livers) and their associated user IDs. The <code>livers</code> table contains additional data values not directly related to the application. For more detailed information, please refer to the official website documentation.</p>"},{"location":"technical/databases/databases/#follows","title":"follows","text":"<ul> <li>id: INTEGER (Primary Key)</li> <li>user_id: INTEGER -&gt; Foreign Key Reference: <code>users.id</code></li> <li>liver_id: INTEGER -&gt; Foreign Key Reference: <code>livers.id</code></li> </ul> <p>Description: Tracks user follow relationships with livers. The <code>follows</code> table contains additional data values not directly related to the application. For more detailed information, please refer to the official website documentation.</p>"},{"location":"technical/databases/databases/#user_own_item","title":"user_own_item","text":"<ul> <li>id: INTEGER (Primary Key)</li> <li>user_id: INTEGER -&gt; Foreign Key Reference: <code>users.id</code></li> <li>type: CHAR</li> <li>file_name: TEXT</li> <li>file_path: TEXT</li> </ul> <p>Description: Manages items owned by users, including file details. The <code>user_own_item</code> table contains additional data values not directly related to the application. For more detailed information, please refer to the official website documentation.</p>"},{"location":"technical/databases/databases/#channels","title":"channels","text":"<ul> <li>id: INTEGER (Primary Key)</li> <li>user_id: INTEGER -&gt; Foreign Key Reference: <code>users.id</code></li> <li>status: CHAR</li> <li>live_start_at: TIMESTAMP</li> <li>live_end_at: TIMESTAMP</li> </ul> <p>Description: The <code>channels</code> table contains additional data values not directly related to the application. For more detailed information, please refer to the official website documentation.</p>"},{"location":"technical/databases/databases/#in_app_purchase","title":"in_app_purchase","text":"<ul> <li>id: INTEGER (Primary Key)</li> <li>user_id: INTEGER -&gt; Foreign Key Reference: <code>users.id</code></li> <li>transaction_id: VARCHAR</li> <li>transaction_type: VARCHAR</li> <li>platform: VARCHAR -&gt; Default: IOS</li> <li>app_cheer: INTEGER -&gt; Description: Purchased Cheer Coin Value</li> <li>used_flag: INTEGER -&gt; Description: Confirmation value for value is updated database</li> <li>created_at: TIMESTAMP</li> <li>updated_at: TIMESTAMP</li> <li>deleted_at: TIMESTAMP</li> </ul> <p>Description: Records in-app purchases made by users, including transaction details and timestamps.</p> <p>Below is a snapshot of the <code>in app purchase</code> table:</p> <p></p>"},{"location":"technical/databases/databases/#in_app_item_purchase","title":"in_app_item_purchase","text":"<ul> <li>id: INTEGER (Primary Key)</li> <li>user_id: INTEGER -&gt; Foreign Key Reference: <code>users.id</code></li> <li>price: INTEGER</li> <li>item_id: VARCHAR</li> <li>platform: VARCHAR</li> <li>quantity: INTEGER</li> <li>created_at: TIMESTAMP</li> <li>updated_at: TIMESTAMP</li> <li>deleted_at: TIMESTAMP</li> </ul> <p>Description: Logs purchases of in-app items, including price, item details, and timestamps.</p> <p>Below is a snapshot of the <code>in app item purchase</code> table:</p> <p></p>"},{"location":"technical/databases/databases/#references","title":"References:","text":"<ul> <li><code>users.id</code> referenced by:<ul> <li><code>in_app_purchase.user_id</code></li> <li><code>in_app_item_purchase.user_id</code></li> <li><code>follows.user_id</code></li> <li><code>livers.user_id</code></li> <li><code>channels.user_id</code></li> <li><code>user_own_item.user_id</code></li> </ul> </li> </ul>"},{"location":"technical/databases/databases/#firebase-database","title":"Firebase Database","text":"<p>Firebase provides the second hosting service for this application, offering a NoSQL database. It comprises five collections:</p> <ul> <li>Levels: Stores data related to levels.</li> <li>Msgs: Stores messaging within the application.</li> <li>Notification: Stores notification data.</li> <li>Reports: Contains analytics and reporting data.</li> <li>Users: Stores user profiles and related information.</li> </ul>"},{"location":"technical/databases/databases/#modules_1","title":"Modules","text":""},{"location":"technical/databases/databases/#tables-collections","title":"Tables (Collections)","text":""},{"location":"technical/databases/databases/#levels","title":"Levels","text":"<ul> <li>id: INTEGER (Primary Key)</li> <li>cap: INTEGER</li> <li>logo: VARCHAR</li> </ul> <p>Description: Stores information about different levels, including their ID, cap value, and logo.</p>"},{"location":"technical/databases/databases/#msgs","title":"Msgs","text":"<ul> <li>id: CHAR (Primary Key)</li> <li>uuid: CHAR</li> <li>userID: CHAR  -&gt; Foreign Key Reference: <code>Users.userID</code></li> <li>msg: VARCHAR</li> <li>name: CHAR</li> <li>imagePath: VARCHAR</li> <li>urlPath: VARCHAR</li> <li>timeStamp: TIMESTAMP</li> </ul> <p>Description: Stores messages with associated user IDs, content, timestamp, and related details.</p>"},{"location":"technical/databases/databases/#notification","title":"Notification","text":"<ul> <li>Access_Token: CHAR (Primary Key)</li> <li>updated_uuid: CHAR</li> <li>token: VARCHAR</li> <li>expired_time: TIMESTAMP</li> </ul> <p>Description: Manages notification tokens with associated access and expiration details.</p>"},{"location":"technical/databases/databases/#reports","title":"Reports","text":"<ul> <li>id: CHAR (Primary Key)</li> <li>userUID: CHAR -&gt; Foreign Key Reference: <code>Users.id</code></li> <li>ReportedUID: CHAR -&gt; Foreign Key Reference: <code>Users.id</code></li> <li>MessageID: CHAR -&gt; Foreign Key Reference: <code>Msgs.id</code></li> <li>Reason: CHAR</li> <li>Date: TIMESTAMP</li> </ul> <p>Description: Stores reports on users, including reported user IDs, message IDs, reasons, and timestamps.</p>"},{"location":"technical/databases/databases/#users_1","title":"Users","text":"<ul> <li>id: CHAR (Primary Key)</li> <li>userID: CHAR</li> <li>TotalLogin: INTEGER</li> <li>TotalExp: INTEGER</li> <li>ShopPoints: INTEGER</li> <li>OwnedItems: ARRAY</li> <li>MissionRewards: ARRAY</li> <li>Level: INTEGER -&gt; Foreign Key Reference: <code>Levels.id</code></li> <li>LastLogin: TIMESTAMP</li> <li>HiddenMessages: ARRAY</li> <li>FCMToken: VARCHAR</li> <li>ExpBoosterEndDay: TIMESTAMP</li> <li>DailyReward: BOOLEAN</li> <li>ConsecutiveLogin: INTEGER</li> </ul> <p>Description: Stores user profiles, including login statistics, points, owned items, mission rewards, current level, login timestamps, notification tokens, and other related attributes.</p>"},{"location":"technical/databases/databases/#references_1","title":"References:","text":"<ul> <li><code>Users.id</code> referenced by:<ul> <li><code>Msgs.uuid</code></li> <li><code>Reports.userUID</code></li> <li><code>Reports.ReportedUID</code></li> <li><code>Notification.updated_uuid</code></li> </ul> </li> <li><code>Users.userID</code> referenced by:<ul> <li><code>Msgs.userID</code></li> </ul> </li> <li><code>Levels.id</code> referenced by:<ul> <li><code>Users.Level</code></li> </ul> </li> <li><code>Msgs.id</code> referenced by:<ul> <li><code>Reports.MessageID</code></li> </ul> </li> </ul>"},{"location":"technical/databases/models/accessmodel/","title":"Access Token Model","text":"<p>This script defines structures and constants for managing Google API access tokens and service account details in a Swift application. It uses Firebase Firestore for storing and retrieving this data. The script includes constants for API access and service account fields, as well as data models for encoding, decoding, and managing this information.</p>"},{"location":"technical/databases/models/accessmodel/#googleapiaccessconstants","title":"GoogleAPIAccessConstants","text":"<pre><code>struct GoogleAPIAccessConstants {\n    static let expired = \"expired_time\"\n    static let accessToken = \"token\"\n    static let updated_by = \"updated_uuid\"\n    static let access_uid = \"Access_Token\"\n    static let service_uid = \"Service_Account\"\n    static let json = \"json\"\n}\n</code></pre> <p>Purpose: Defines constants for field names related to Google API access tokens. These constants are used to avoid hardcoding field names in the application and ensure consistency.</p> <ul> <li><code>expired</code>: The field name for the expiration time of the token.</li> <li><code>accessToken</code>: The field name for the access token itself.</li> <li><code>updated_by</code>: The field name for the UUID of the user who last updated the token.</li> <li><code>access_uid</code>: The field name for the access token identifier.</li> <li><code>service_uid</code>: The field name for the service account identifier.</li> <li><code>json</code>: The field name for JSON data associated with the token or service account.</li> </ul>"},{"location":"technical/databases/models/accessmodel/#accesstokendata","title":"AccessTokenData","text":"<pre><code>struct AccessTokenData {\n    let expired: Date\n    let token: String\n    let updated_by: String\n\n    init(expired: Date, token: String, updated_by: String) {\n        self.expired = expired\n        self.token = token\n        self.updated_by = updated_by\n    }\n}\n</code></pre> <p>Purpose: Represents the data associated with an access token, including its expiration time, the token value, and the UUID of the user who updated it.</p> <ul> <li><code>expired</code>: The expiration date of the access token.</li> <li><code>token</code>: The access token value.</li> <li><code>updated_by</code>: UUID of the user who last updated the token.</li> </ul>"},{"location":"technical/databases/models/accessmodel/#accesstokenmodel","title":"AccessTokenModel","text":"<pre><code>struct AccessTokenModel: Codable, Identifiable, Hashable {\n    @DocumentID var id: String?\n\n    var expired: Date\n    var token: String\n    var updated_by: String\n\n    enum CodingKeys: CodingKey {\n        case id\n        case expired\n        case token\n        case updated_by\n    }\n}\n</code></pre> <p>Purpose: A data model used for encoding and decoding access token information with Firestore. It conforms to <code>Codable</code>, <code>Identifiable</code>, and <code>Hashable</code> protocols for easy integration with Firestore.</p> <ul> <li><code>id</code>: Optional unique identifier for the Firestore document.</li> <li><code>expired</code>: The expiration date of the access token.</li> <li><code>token</code>: The access token value.</li> <li> <p><code>updated_by</code>: UUID of the user who last updated the token.</p> </li> <li> <p>CodingKeys Enum: Maps Swift property names to Firestore field names to facilitate encoding and decoding.</p> </li> </ul>"},{"location":"technical/databases/models/accessmodel/#serviceaccountconstants","title":"ServiceAccountConstants","text":"<pre><code>struct ServiceAccountConstants {\n    static let type = \"type\"\n    static let project_id = \"project_id\"\n    static let private_key_id = \"private_key_id\"\n    static let private_key = \"private_key\"\n    static let client_email = \"client_email\"\n    static let client_id = \"client_id\"\n    static let auth_uri = \"auth_uri\"\n    static let token_uri = \"token_uri\"\n    static let auth_provider = \"auth_provider_x509_cert_url\"\n    static let client_cert_url = \"client_x509_cert_url\"\n    static let universe_domain = \"universe_domain\"\n}\n</code></pre> <p>Purpose: Defines constants for field names related to service account credentials. These constants are used to maintain consistency and avoid hardcoding field names.</p> <ul> <li><code>type</code>: The type of the service account.</li> <li><code>project_id</code>: The project ID associated with the service account.</li> <li><code>private_key_id</code>: The ID of the private key.</li> <li><code>private_key</code>: The private key itself.</li> <li><code>client_email</code>: The email address associated with the service account.</li> <li><code>client_id</code>: The client ID.</li> <li><code>auth_uri</code>: The authentication URI.</li> <li><code>token_uri</code>: The token URI for obtaining access tokens.</li> <li><code>auth_provider</code>: The URL for the authentication provider's certificate.</li> <li><code>client_cert_url</code>: The URL for the client certificate.</li> <li><code>universe_domain</code>: The universe domain associated with the service account.</li> </ul>"},{"location":"technical/databases/models/accessmodel/#serviceaccountdata","title":"ServiceAccountData","text":"<pre><code>struct ServiceAccountData {\n    let type: String\n    let project_id: String\n    let private_key_id: String\n    let private_key: String\n    let client_email: String\n    let client_id: String\n    let auth_uri: String\n    let token_uri: String\n    let auth_provider: String\n    let client_cert_url: String\n    let universe_domain: String\n\n    init(type: String, project_id: String, private_key_id: String, private_key: String, client_email: String, client_id: String, auth_uri: String, token_uri: String, auth_provider: String, client_cert_url: String, universe_domain: String) {\n        self.type = type\n        self.project_id = project_id\n        self.private_key_id = private_key_id\n        self.private_key = private_key\n        self.client_email = client_email\n        self.client_id = client_id\n        self.auth_uri = auth_uri\n        self.token_uri = token_uri\n        self.auth_provider = auth_provider\n        self.client_cert_url = client_cert_url\n        self.universe_domain = universe_domain\n    }\n}\n</code></pre> <p>Purpose: Represents the data associated with a service account. This structure is used to manage and initialize service account details.</p> <ul> <li><code>type</code>: The type of the service account.</li> <li><code>project_id</code>: The project ID associated with the service account.</li> <li><code>private_key_id</code>: The ID of the private key.</li> <li><code>private_key</code>: The private key itself.</li> <li><code>client_email</code>: The email address associated with the service account.</li> <li><code>client_id</code>: The client ID.</li> <li><code>auth_uri</code>: The authentication URI.</li> <li><code>token_uri</code>: The token URI for obtaining access tokens.</li> <li><code>auth_provider</code>: The URL for the authentication provider's certificate.</li> <li><code>client_cert_url</code>: The URL for the client certificate.</li> <li><code>universe_domain</code>: The universe domain associated with the service account.</li> </ul>"},{"location":"technical/databases/models/accessmodel/#serviceaccountmodel","title":"ServiceAccountModel","text":"<p>NOTE: Currently is unused model therefore can be ignore it.</p> <pre><code>struct ServiceAccountModel: Codable, Identifiable, Hashable {\n    @DocumentID var id: String?\n\n    var type: String\n    var project_id: String\n    var private_key_id: String\n    var private_key: String\n    var client_email: String\n    var client_id: String\n    var auth_uri: String\n    var token_uri: String\n    var auth_provider: String\n    var client_cert_url: String\n    var universe_domain: String\n\n    enum CodingKeys: CodingKey {\n        case type\n        case project_id\n        case private_key_id\n        case private_key\n        case client_email\n        case client_id\n        case auth_uri\n        case token_uri\n        case auth_provider\n        case client_cert_url\n        case universe_domain\n    }\n}\n</code></pre> <p>Purpose: A data model used for encoding and decoding service account information with Firestore. It conforms to <code>Codable</code>, <code>Identifiable</code>, and <code>Hashable</code> protocols for easy integration with Firestore.</p> <ul> <li><code>id</code>: Optional unique identifier for the Firestore document.</li> <li><code>type</code>: The type of the service account.</li> <li><code>project_id</code>: The project ID associated with the service account.</li> <li><code>private_key_id</code>: The ID of the private key.</li> <li><code>private_key</code>: The private key itself.</li> <li><code>client_email</code>: The email address associated with the service account.</li> <li><code>client_id</code>: The client ID.</li> <li><code>auth_uri</code>: The authentication URI.</li> <li><code>token_uri</code>: The token URI for obtaining access tokens.</li> <li><code>auth_provider</code>: The URL for the authentication provider's certificate.</li> <li><code>client_cert_url</code>: The URL for the client certificate.</li> <li><code>universe_domain</code>: The universe domain associated with the service account.</li> </ul> <p>CodingKeys Enum: Maps Swift property names to Firestore field names to facilitate encoding and decoding.</p> <p>The script provides a structured approach to managing Google API access tokens and service account details within a Swift application. It includes:</p> <ul> <li><code>GoogleAPIAccessConstants</code>: Constants for field names related to Google API access tokens.</li> <li><code>AccessTokenData</code>: Represents access token data with an initializer.</li> <li><code>AccessTokenModel</code>: A Firestore-compatible model for access token data.</li> <li><code>ServiceAccountConstants</code>: Constants for field names related to service account credentials.</li> <li><code>ServiceAccountData</code>: Represents service account data with an initializer.</li> <li><code>ServiceAccountModel</code>: A Firestore-compatible model for service account data.</li> </ul>"},{"location":"technical/databases/models/msgmodel/","title":"MsgModel","text":""},{"location":"technical/databases/models/msgmodel/#libraries","title":"Libraries","text":"<pre><code>import SwiftUI\nimport Firebase\nimport FirebaseFirestoreSwift\n</code></pre> <ul> <li>SwiftUI: Framework for building user interfaces.</li> <li>Firebase: Backend-as-a-Service platform used for real-time databases, authentication, and more.</li> <li>FirebaseFirestoreSwift: Firebase library that provides Swift-specific extensions for Firestore, including Codable support.</li> </ul>"},{"location":"technical/databases/models/msgmodel/#model","title":"Model","text":"<pre><code>struct MsgModel: Codable, Identifiable, Hashable {\n\n    @DocumentID var id: String?\n\n    var userID: String? = nil\n    var msg: String? = nil\n    var name: String? = nil // nickname\n    var timeStamp: Date\n    var urlPath: String? = nil // avatar link\n    var imagePath: String? = nil\n    var uuid: String?\n\n    enum Codingkeys: String, CodingKey {\n        case id\n        case userID\n        case msg\n        case name\n        case timeStamp\n        case urlPath\n        case imagePath\n        case uuid\n    }\n}\n</code></pre> <p>Description: Represents a message model conforming to Codable, Identifiable, and Hashable protocols for use with Firebase Firestore.</p> <p>Properties:</p> <ul> <li><code>id</code>: Optional String (<code>@DocumentID</code> property wrapper) - Unique identifier for the message document in Firestore.</li> <li><code>userID</code>: Optional String - User ID associated with the message.</li> <li><code>msg</code>: Optional String - Message content.</li> <li><code>name</code>: Optional String - Nickname associated with the user.</li> <li><code>timeStamp</code>: Date - Timestamp indicating when the message was created.</li> <li><code>urlPath</code>: Optional String - URL link to the user's avatar.</li> <li><code>imagePath</code>: Optional String - Path to an image associated with the message.</li> <li> <p><code>uuid</code>: Optional String - Universally unique identifier for the message.</p> </li> <li> <p>CodingKeys Enum: Specifies the mapping between the Swift property names and the corresponding Firestore document field names.</p> </li> </ul>"},{"location":"technical/databases/models/msgmodel/#notes","title":"Notes","text":"<ul> <li>Firestore Integration: This model is designed to integrate with Firestore, allowing seamless conversion between Firestore documents and Swift objects using Codable protocols.</li> <li>Firebase FirestoreSwift: Utilizes the <code>@DocumentID</code> property wrapper from <code>FirebaseFirestoreSwift</code> to manage document IDs directly within the Swift struct.</li> <li>SwiftUI Compatibility: The script imports SwiftUI, indicating potential integration with SwiftUI views or components, though not directly evident from the provided script.</li> </ul> <p>This documentation provides a clear overview of the <code>MsgModel</code> struct, its properties, and its intended use with Firebase Firestore for managing message data within the application.</p>"},{"location":"technical/databases/models/reportsmodel/","title":"Reports Model","text":"<p>This script defines a data model and related structures for managing reports in a Swift application using Firebase Firestore. It includes a model for report data, constants for Firestore field names, and a structure for report details.</p> <p>ReportsModel.swift</p>"},{"location":"technical/databases/models/reportsmodel/#libraries","title":"Libraries","text":"<ul> <li><code>Foundation</code>: Provides fundamental classes and services for Swift applications.</li> <li><code>FirebaseFirestore</code>: Firebase SDK for integrating Firestore database services.</li> </ul>"},{"location":"technical/databases/models/reportsmodel/#reportsmodel-structure","title":"ReportsModel Structure","text":"<pre><code>struct ReportsModel: Codable, Identifiable, Hashable {\n    @DocumentID var id: String?            // Unique Firestore document ID (optional)\n\n    var userUID: String                    // ID of the user who made the report\n    var date: Date                        // Date when the report was created\n    var reason: String                    // Reason for the report\n    var reportedUserUID: String           // ID of the user being reported\n    var msg_id: String                    // ID of the message associated with the report\n\n    enum CodingKeys: String, CodingKey {\n        case id\n        case userUID\n        case date\n        case reason\n        case reportedUserUID\n        case msg_id\n    }\n}\n</code></pre> <p>Attributes:</p> <ul> <li><code>id</code>: The unique identifier for the Firestore document (optional and automatically assigned).</li> <li><code>userUID</code>: A unique identifier for the user who submitted the report.</li> <li><code>date</code>: The date when the report was created.</li> <li><code>reason</code>: A description of why the report was made.</li> <li><code>reportedUserUID</code>: The unique identifier of the user who is being reported.</li> <li> <p><code>msg_id</code>: The identifier of the message related to the report.</p> </li> <li> <p>CodingKeys Enum: Maps Swift property names to Firestore field names to facilitate encoding and decoding.</p> </li> </ul>"},{"location":"technical/databases/models/reportsmodel/#reasonsconstant","title":"ReasonsConstant","text":"<pre><code>struct ReasonsConstant {\n    static let user_uid = \"UserUID\"        // Field name for the user ID in Firestore\n    static let reason = \"Reason\"           // Field name for the reason of the report\n    static let reported_uid = \"ReportedUID\" // Field name for the reported user's ID\n    static let msg_id = \"MessageID\"        // Field name for the message ID\n    static let date = \"Date\"               // Field name for the report creation date\n}\n</code></pre> <p>Purpose: Defines constants for Firestore field names to avoid hardcoding and to maintain consistency across the application.</p>"},{"location":"technical/databases/models/reportsmodel/#reasondatas","title":"ReasonDatas","text":"<pre><code>struct ReasonDatas {\n    let user_uid: String                  // User ID of the reporter\n    let reason: String                    // Reason for the report\n    let reported_uid: String              // User ID of the reported user\n    let msg_id: String                    // Message ID related to the report\n    let date: Date                        // Date when the report was created\n\n    init(user_uid: String, reason: String, reported_uid: String, msg_id: String, date: Date) {\n        self.user_uid = user_uid\n        self.reason = reason\n        self.reported_uid = reported_uid\n        self.msg_id = msg_id\n        self.date = date\n    }\n}\n</code></pre> <p>Purpose: Represents the details of a report with an initializer for creating instances. This structure is used for managing report data in a type-safe manner.</p>"},{"location":"technical/databases/models/reportsmodel/#report-reasons","title":"Report Reasons","text":"<p>The following are predefined reasons for reporting, which can be used to standardize the types of reports submitted:</p> <ul> <li>Inappropriate Profile: Report for profiles containing inappropriate content or behavior.</li> <li>Sexual Message/Image: Report for messages or images that contain sexual content.</li> <li>Spam/Advertising: Report for content that is classified as spam or unsolicited advertising.</li> <li>Harassment: Report for messages or behavior that constitutes harassment.</li> <li>Fraud: Report for actions or content involving fraudulent activity.</li> </ul>"},{"location":"technical/databases/models/userinfomodel/","title":"User Info Model","text":"<p>The script defines data models for managing user information in a Swift application, specifically one that integrates with Firebase for data storage and retrieval. It includes models for user information, constants for Firebase collections and parameters, and structures for user and level data.</p> <p>UserInfoModel.swift</p>"},{"location":"technical/databases/models/userinfomodel/#libraries","title":"Libraries","text":"<ul> <li><code>Foundation</code>: Provides fundamental classes and services for Swift applications.</li> <li><code>SwiftUI</code>: Framework for building user interfaces.</li> <li><code>Firebase</code>: Firebase SDK for integrating Firebase services.</li> <li><code>FirebaseFirestoreSwift</code>: Firebase Firestore Swift extensions for easier handling of Firestore data.</li> </ul>"},{"location":"technical/databases/models/userinfomodel/#userinfomodel-structure","title":"UserInfoModel Structure","text":"<pre><code>struct UserInfoModel: Codable, Identifiable, Hashable {\n    @DocumentID var id: String?             // Unique Firebase id\n    var userID: String                     // User's ID in database\n    var shopPoint: Int                     // User's earned Shop Points\n    var totalExp: Int                      // User's earned total exp points\n    var consecutiveLogin: Int             // Consecutive login value\n    var totalLogin: Int                   // Total login days\n    var ownedAllItems: [String]           // Owned name of the items list\n    var lastLogin: Date                    // Last day login date\n    var expBoosterEndDay: Date            // End date of the total booster\n    var dailyReward: Bool                 // Daily rewards receive status\n    var missionRewards: [Bool]            // Mission rewards receive status\n    var blockedUsers: [String]            // List of blocked users UUID\n    var hiddenMsgs: [String]              // List of hidden messages\n    var fcmToken: String                  // Notification token\n\n    enum CodingKeys: String, CodingKey {\n        case id\n        case userID\n        case totalExp\n        case consecutiveLogin\n        case totalLogin\n        case lastLogin\n        case expBoosterEndDay\n        case ownedAllItems\n        case dailyReward\n        case missionRewards\n        case blockedUsers\n        case hiddenMsgs\n        case fcmToken\n    }\n}\n</code></pre> <p>Attributes:</p> <ul> <li><code>id</code>: Firebase document ID (optional).</li> <li><code>userID</code>: A unique identifier for the user within the database.</li> <li><code>shopPoint</code>: The number of shop points the user has earned.</li> <li><code>totalExp</code>: Total experience points earned by the user.</li> <li><code>consecutiveLogin</code>: Number of consecutive login days.</li> <li><code>totalLogin</code>: Total number of login days.</li> <li><code>ownedAllItems</code>: List of item names owned by the user.</li> <li><code>lastLogin</code>: The date of the last login.</li> <li><code>expBoosterEndDay</code>: The date when the experience booster ends.</li> <li><code>dailyReward</code>: Indicates whether the user has received daily rewards.</li> <li><code>missionRewards</code>: Status of rewards received for missions.</li> <li><code>blockedUsers</code>: List of UUIDs of users blocked by this user.</li> <li><code>hiddenMsgs</code>: List of messages that are hidden.</li> <li><code>fcmToken</code>: Firebase Cloud Messaging token for notifications.</li> </ul>"},{"location":"technical/databases/models/userinfomodel/#firebasecollectionconstants","title":"FirebaseCollectionConstants","text":"<pre><code>struct FirebaseCollectionConstants {\n    static let users = \"Users\"\n    static let levels = \"Levels\"\n    static let emojis = \"Emojis\"\n    static let images = \"Images\"\n    static let reports = \"Reports\"\n    static let msgs = \"Msgs\"\n    static let notification = \"Notification\"\n}\n</code></pre> <p>Purpose: Holds constant values for Firebase collection names to avoid hardcoding strings throughout the codebase.</p>"},{"location":"technical/databases/models/userinfomodel/#userinfoconstants","title":"UserInfoConstants","text":"<pre><code>struct UserInfoConstants {\n    static let userID = \"UserID\"                    // String\n    static let shopPoint = \"ShopPoints\"             // Int\n    static let totalExp = \"TotalExp\"                // Int\n    static let consecutiveLogin = \"ConsecutiveLogin\" // Int\n    static let totalLogin = \"TotalLogin\"            // Int\n    static let level = \"Level\"                      // Int\n    static let ownedItems = \"OwnedItems\"            // Array&lt;String&gt;\n    static let lastLogin = \"LastLogin\"              // Date\n    static let expBoosterEndDay = \"ExpBoosterEndDay\" // Date\n    static let dailyReward = \"DailyReward\"          // Bool\n    static let missionRewards = \"MissionRewards\"    // Array&lt;Bool&gt;\n    static let blockedUsers = \"BlockedUsers\"        // Array&lt;String&gt;\n    static let hiddenMsgs = \"HiddenMessages\"        // Array&lt;String&gt;\n    static let fcmToken = \"FCMToken\"                // String\n}\n</code></pre> <p>Purpose: Defines constants for database field names to maintain consistency and reduce errors.</p>"},{"location":"technical/databases/models/userinfomodel/#userdatas","title":"UserDatas","text":"<pre><code>struct UserDatas: Codable {\n    let userID: String\n    let shopPoint: Int\n    let totalExp: Int\n    let consecutiveLogin: Int\n    let totalLogin: Int\n    let level: Int\n    let ownedItems: [String]\n    let lastLogin: Date\n    let expBoosterEndDay: Date\n    let dailyReward: Bool\n    let missionRewards: [Bool]\n    let blockedUsers: [String]\n    let hiddenMsgs: [String]\n    let fcmToken: String\n\n    init(userID: String, shopPoint: Int, totalExp: Int, consecutiveLogin: Int, totalLogin: Int, level: Int, ownedItems: [String], lastLogin: Date, expBoosterEndDay: Date, dailyReward: Bool, missionRewards: [Bool], blockedUsers: [String], hiddenMsgs: [String], fcmToken: String) {\n        self.userID = userID\n        self.shopPoint = shopPoint\n        self.totalExp = totalExp\n        self.consecutiveLogin = consecutiveLogin\n        self.totalLogin = totalLogin\n        self.level = level\n        self.ownedItems = ownedItems\n        self.lastLogin = lastLogin\n        self.expBoosterEndDay = expBoosterEndDay\n        self.dailyReward = dailyReward\n        self.missionRewards = missionRewards\n        self.blockedUsers = blockedUsers\n        self.hiddenMsgs = hiddenMsgs\n        self.fcmToken = fcmToken\n    }\n}\n</code></pre> <p>Purpose: Represents user data with an initializer for creating instances.</p>"},{"location":"technical/databases/models/userinfomodel/#levelconstants","title":"LevelConstants","text":"<pre><code>struct LevelConstants {\n    static let cap = \"Cap\"    // Int\n    static let logo = \"Logo\"  // String\n}\n</code></pre> <p>Purpose: Contains constant field names for level data in the database.</p>"},{"location":"technical/databases/models/userinfomodel/#leveldatas","title":"LevelDatas","text":"<pre><code>struct LevelDatas {\n    let cap: Int\n    let logo: String\n\n    init(cap: Int, logo: String) {\n        self.cap = cap\n        self.logo = logo\n    }\n}\n</code></pre> <p>Purpose: Represents level data with an initializer for creating instances.</p>"},{"location":"technical/functions/func/","title":"Overview","text":"<p>This section provides an explanation of key functions, classes, and resource functions used in the project. It will be divided into two main sections: Resources and View Models.</p>"},{"location":"technical/functions/func/#resources","title":"Resources","text":"<p>The Resources section covers reusable components and utilities that facilitate common tasks and operations across the application. This includes, but is not limited to:</p> <ul> <li>UI Models: Definitions and implementations of user interface models that are used throughout the application to maintain consistency and promote reuse.</li> <li>Concurrency Utilities: Tools and techniques for managing asynchronous operations, multi-threading, and concurrent tasks to ensure smooth and efficient performance.</li> </ul>"},{"location":"technical/functions/func/#view-models","title":"View Models","text":"<p>The View Models section focuses on the components responsible for managing and preparing data for display in the user interface. This includes:</p> <ul> <li>Data Binding: Mechanisms for linking data sources with UI components to ensure that the user interface reflects the current state of the data.</li> <li>State Management: Techniques for managing the state of the application and handling user interactions to provide a responsive and intuitive user experience.</li> </ul>"},{"location":"technical/functions/resouces/","title":"Resources","text":""},{"location":"technical/functions/resouces/#horizontal-tab","title":"Horizontal Tab","text":"<p>A SwiftUI <code>View</code> that displays a horizontal tab bar.</p> <p>The <code>CustomHorizontalTabView</code> is a SwiftUI component designed to display a horizontally scrollable tab bar. It supports custom tab titles and optional icons, allowing users to switch between different tabs with smooth animations. The component adjusts its layout based on whether the tabs are fixed-width or flexible.</p>"},{"location":"technical/functions/resouces/#struct-definitions","title":"Struct Definitions","text":""},{"location":"technical/functions/resouces/#tab","title":"<code>Tab</code>","text":"<p>A simple struct representing a tab in the <code>CustomHorizontalTabView</code>.</p>"},{"location":"technical/functions/resouces/#properties","title":"Properties","text":"<ul> <li><code>icon</code>: An optional <code>Image</code> that represents the tab's icon.</li> <li><code>title</code>: A <code>String</code> that specifies the tab's title.</li> </ul> <pre><code>struct Tab {\n    var icon: Image?\n    var title: String\n}\n</code></pre>"},{"location":"technical/functions/resouces/#customhorizontaltabview","title":"<code>CustomHorizontalTabView</code>","text":"<p>A SwiftUI <code>View</code> that displays a horizontal tab bar.</p>"},{"location":"technical/functions/resouces/#properties_1","title":"Properties","text":"<ul> <li><code>fixed</code>: A <code>Bool</code> that determines whether tabs should have fixed widths (default: <code>true</code>).</li> <li><code>tabs</code>: An array of <code>Tab</code> objects that define the tabs to be displayed.</li> <li><code>geoWidth</code>: A <code>CGFloat</code> representing the width available for each tab when <code>fixed</code> is <code>true</code>.</li> <li><code>selectedTab</code>: A <code>Binding</code> to an <code>Int</code> that tracks the index of the currently selected tab.</li> </ul>"},{"location":"technical/functions/resouces/#minusplusbutton","title":"<code>MinusPlusButton</code>","text":"<p>This script provides a SwiftUI component, <code>MinusPlusButton</code>, designed for incrementing and decrementing a bound integer value. It also enforces a maximum value limit of 99. The component uses environment values to bind and observe changes to the value.</p>"},{"location":"technical/functions/resouces/#environment-key-amountunit","title":"Environment Key: <code>AmountUnit</code>","text":""},{"location":"technical/functions/resouces/#purpose","title":"Purpose","text":"<p>Defines a custom environment key for binding an integer value, allowing the value to be shared and observed across different views.</p>"},{"location":"technical/functions/resouces/#definition","title":"Definition","text":"<pre><code>private struct AmountUnit: EnvironmentKey {\n    static let defaultValue: Binding&lt;Int&gt; = .constant(0)\n}\n</code></pre> <ul> <li><code>defaultValue</code>: The default binding value is set to <code>0</code>.</li> </ul>"},{"location":"technical/functions/resouces/#extension-environmentvalues","title":"Extension: <code>EnvironmentValues</code>","text":""},{"location":"technical/functions/resouces/#purpose_1","title":"Purpose","text":"<p>Extends <code>EnvironmentValues</code> to include the custom <code>AmountUnit</code> binding, enabling access to this binding in SwiftUI views.</p>"},{"location":"technical/functions/resouces/#extension","title":"Extension","text":"<pre><code>extension EnvironmentValues {\n    var amountUnit: Binding&lt;Int&gt; {\n        get { self[AmountUnit.self] }\n        set { self[AmountUnit.self] = newValue }\n    }\n}\n</code></pre> <ul> <li><code>amountUnit</code>: Provides a computed property to get and set the <code>AmountUnit</code> environment value.</li> </ul>"},{"location":"technical/functions/resouces/#swiftui-view-minusplusbutton","title":"SwiftUI View: <code>MinusPlusButton</code>","text":""},{"location":"technical/functions/resouces/#purpose_2","title":"Purpose","text":"<p>A SwiftUI view that includes two buttons (for increment and decrement) and a <code>TextField</code> to display and edit an integer value bound through the environment.</p>"},{"location":"technical/functions/resouces/#properties_2","title":"Properties","text":"<ul> <li><code>@Environment(\\.amountUnit)</code>: A binding to the integer value that is observed and updated by this view.</li> </ul>"},{"location":"technical/functions/resouces/#ui-components","title":"UI Components","text":"<p>Buttons: </p> <ul> <li>The minus button decreases the <code>amountUnit</code> value by 1 if it is greater than 0.</li> <li>The plus button increases the <code>amountUnit</code> value by 1 if it is less than 99. If it reaches 99, it remains at that value.</li> </ul> <p>TextField:</p> <ul> <li>Displays the current value of <code>amountUnit</code>.</li> <li>Uses a <code>NumberFormatter</code> to format the integer value.</li> <li>On submission, if the value exceeds 99, it is set to 99.</li> </ul>"},{"location":"technical/functions/resouces/#behavior","title":"Behavior","text":"<ul> <li>Decrement Button: Reduces the value bound to <code>amountUnit</code> if it is greater than 0.</li> <li>Increment Button: Increases the value bound to <code>amountUnit</code> if it is less than 99. If it reaches 99, it stays at that value.</li> <li>TextField: Ensures the displayed value does not exceed 99 upon user input.</li> </ul>"},{"location":"technical/functions/resouces/#custombuttonstyle","title":"<code>CustomButtonStyle</code>","text":"<p>The <code>CustomButtonStyle</code> is a SwiftUI <code>ButtonStyle</code> that allows for the customization of button appearance and behavior. It supports setting button color, size, and provides a visual scaling effect when the button is pressed.</p> <p>A struct conforming to <code>ButtonStyle</code>, which customizes the appearance and animation of a button.</p>"},{"location":"technical/functions/resouces/#properties_3","title":"Properties","text":"<ul> <li><code>color</code>: A <code>Color</code> that defines the background color of the button.</li> <li><code>width</code>: A <code>CGFloat</code> that specifies the width of the button.</li> <li><code>height</code>: A <code>CGFloat</code> that specifies the height of the button.</li> </ul>"},{"location":"technical/functions/resouces/#definition_1","title":"Definition","text":"<pre><code>struct CustomButtonStyle: ButtonStyle {\n    var color: Color\n    var width: CGFloat\n    var height: CGFloat\n\n    func makeBody(configuration: Configuration) -&gt; some View {\n        configuration.label\n            .padding(5)\n            .frame(width: width, height: height)\n            .font(.system(size: 20).bold())\n            .background(color)\n            .foregroundColor(.white)\n            .clipShape(Capsule())\n            .cornerRadius(10)\n            .scaleEffect(configuration.isPressed ? 0.85 : 1)\n            .animation(Animation.easeIn(duration: 0.4), value: 0.2)\n    }\n}\n</code></pre>"},{"location":"technical/functions/resouces/#method","title":"Method","text":"<ul> <li><code>makeBody(configuration:)</code>: A required method for conforming to the ButtonStyle protocol in SwiftUI. It creates and returns a view that represents the style of a button, based on the current configuration.</li> <li><code>configuration</code>: Provides context for the button\u2019s current state, including whether it is pressed.</li> </ul>"},{"location":"technical/functions/resouces/#view-modifiers-applied","title":"View Modifiers Applied","text":"<ul> <li><code>padding(5)</code>: Adds padding around the button content.</li> <li><code>frame(width:height:)</code>: Sets the button's width and height.</li> <li><code>font(.system(size: 20).bold())</code>: Applies a bold font of size 20 to the button's label.</li> <li><code>background(color)</code>: Sets the button's background color.</li> <li><code>foregroundColor(.white)</code>: Sets the text color of the button's label to white.</li> <li><code>clipShape(Capsule())</code>: Clips the button to a capsule shape.</li> <li><code>cornerRadius(10)</code>: Adds rounded corners with a radius of 10 to the button.</li> <li><code>scaleEffect(configuration.isPressed ? 0.85 : 1)</code>: Scales down the button to 85% of its size when pressed, providing a visual feedback.</li> <li><code>animation(Animation.easeIn(duration: 0.4), value: 0.2)</code>: Applies an easing in animation with a duration of 0.4 seconds for the scale effect.</li> </ul>"},{"location":"technical/functions/resouces/#keyboardobserver","title":"<code>KeyboardObserver</code>","text":"<p>The <code>KeyboardObserver</code> class monitors the keyboard's height and updates a published property accordingly. It conforms to the <code>ObservableObject</code> protocol, allowing SwiftUI views to react to changes in keyboard height.</p> <p>A class that observes keyboard visibility and height changes, updating a published property to reflect the current keyboard height.</p>"},{"location":"technical/functions/resouces/#properties_4","title":"Properties","text":"<p><code>@Published var keyboardHeight: CGFloat</code>: </p> <ul> <li>Represents the current height of the keyboard. Initialized to a default value based on a percentage of the screen height (<code>UIScreen.main.bounds.height * 0.39</code>).</li> </ul>"},{"location":"technical/functions/resouces/#initializer","title":"Initializer","text":"<p><code>init()</code>:</p> <ul> <li>Calls <code>listenForKeyboardNotifications()</code> to start observing keyboard notifications.</li> </ul>"},{"location":"technical/functions/resouces/#methods","title":"Methods","text":"<p><code>private func listenForKeyboardNotifications()</code>:</p> <ul> <li>Registers for keyboard notifications (<code>UIResponder.keyboardDidShowNotification</code>).</li> <li>Updates <code>keyboardHeight</code> when the keyboard appears, using the height from the keyboard's frame obtained from the notification.</li> </ul>"},{"location":"technical/functions/resouces/#notes","title":"Notes","text":"<ul> <li>Default Value: The default keyboard height is set to 39% of the screen's height.</li> <li>Notification Handling: Only updates the <code>keyboardHeight</code> when the keyboard is shown. If you need to handle keyboard hiding, consider adding a listener for <code>UIResponder.keyboardDidHideNotification</code>.</li> </ul>"},{"location":"technical/functions/resouces/#chatbubble","title":"<code>ChatBubble</code>","text":"<p>The <code>ChatBubble</code> struct defines a custom shape for a chat bubble in SwiftUI. It customizes the shape's corners based on the sender of the message (<code>myMsg</code>), creating a distinct appearance for incoming and outgoing messages.</p> <p>A struct conforming to the <code>Shape</code> protocol, used to create a chat bubble with customizable rounded corners.</p>"},{"location":"technical/functions/resouces/#properties_5","title":"Properties","text":"<p><code>var myMsg: Bool</code>:</p> <ul> <li>A boolean indicating whether the message is sent by the current user (<code>true</code> for my message, <code>false</code> for received message). Determines which corners of the chat bubble are rounded.</li> </ul>"},{"location":"technical/functions/resouces/#implementation","title":"Implementation","text":"<pre><code>func path(in rect: CGRect) -&gt; Path {\n    let path = UIBezierPath(roundedRect: rect, byRoundingCorners: [.topLeft, .topRight, myMsg ? .bottomLeft : .bottomRight], cornerRadii: CGSize(width: 15, height: 15))\n\n    return Path(path.cgPath)\n}\n</code></pre>"},{"location":"technical/functions/resouces/#methods_1","title":"Methods","text":"<p><code>func path(in rect: CGRect) -&gt; Path</code>:</p> <ul> <li>Creates a <code>Path</code> representing the chat bubble's shape.</li> <li>Uses <code>UIBezierPath</code> to define the rounded rectangle with specific corners rounded based on the <code>myMsg</code> property.</li> <li>The corners are rounded as follows:<ul> <li>Top Left and Top Right: Always rounded.</li> <li>Bottom Left: Rounded if <code>myMsg</code> is <code>true</code>.</li> <li>Bottom Right: Rounded if <code>myMsg</code> is <code>false</code>.</li> </ul> </li> </ul>"},{"location":"technical/functions/ViewModels/func1/","title":"FirebaseUserInfoViewModel: Firebase Operations","text":""},{"location":"technical/functions/ViewModels/func1/#overview","title":"Overview","text":"<p>The <code>FirebaseUserInfoViewModel</code> class handles user information management using Firebase. It provides functionalities for user authentication, account creation, data retrieval, and deletion. It interacts with Firebase Authentication and Firestore to manage user data and user sessions.</p>"},{"location":"technical/functions/ViewModels/func1/#properties","title":"Properties","text":"<ul> <li><code>@Published var currentExp: Int = 0</code></li> <li><code>@Published var levelCap: Int = 200</code></li> <li><code>@Published var levelLogo: String = \"\"</code></li> <li><code>@Published var userLevel: Int = 1</code></li> <li><code>@Published var shopPoint: Int = 0</code></li> <li><code>@Published var cons_login_value: Int = 0</code></li> <li><code>@Published var collectMissionRewards: [Bool] = [true,true,true,true,true,true,true]</code></li> <li><code>@Published var collectDailyLoginRewards: Bool = false</code></li> <li><code>@Published var boosterExpirationDate = Date.now</code></li> <li><code>@Published var lockLevelLabelToggle = true</code></li> <li><code>@Published var expMultiplier = 1</code></li> </ul>"},{"location":"technical/functions/ViewModels/func1/#methods","title":"Methods","text":""},{"location":"technical/functions/ViewModels/func1/#authorization-functions","title":"AUTHORIZATION FUNCTIONS","text":""},{"location":"technical/functions/ViewModels/func1/#checkuseruserid-string-completion-escaping-bool-void","title":"<code>checkUser(userId: String, completion: @escaping (Bool) -&gt; Void)</code>","text":"<p>Checks if a user exists in the Firestore database based on the provided user ID.</p> <p>Parameters:</p> <ul> <li><code>userId</code>: The user ID to search for in the database.</li> <li><code>completion</code>: A closure that receives a boolean indicating whether the user exists.</li> </ul> <p>Details:</p> <ul> <li>Queries the Firestore <code>users</code> collection.</li> <li>Searches for documents where the field <code>userID</code> matches the provided <code>userId</code>.</li> <li>Calls <code>completion(true)</code> if a matching document is found, otherwise <code>completion(false)</code>.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#firebasecreateuser_loginemail-string-password-string-userid-string","title":"<code>firebaseCreateUser_Login(email: String, password: String, userID: String)</code>","text":"<p>Creates a new user with specified email and password, and initializes user data in Firestore.</p> <p>Parameters:</p> <ul> <li><code>email</code>: The email address for the new user.</li> <li><code>password</code>: The password for the new user.</li> <li><code>userID</code>: The unique identifier for the new user.</li> </ul> <p>Details:</p> <ul> <li>Creates a new user using Firebase Authentication.</li> <li>Calls <code>saveUserInformation</code> to store the user's initial data in Firestore.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#firebasesigninemail-string-password-string","title":"<code>firebaseSignIn(email: String, password: String)</code>","text":"<p>Signs in a user with specified email and password.</p> <p>Parameters:</p> <ul> <li><code>email</code>: The email address for sign-in.</li> <li><code>password</code>: The password for sign-in.</li> </ul> <p>Details:</p> <ul> <li>Signs in the user using Firebase Authentication.</li> <li>Updates the daily login date and resets the consecutive login counter.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#deletefirebaseaccount-async","title":"<code>deleteFirebaseAccount() async</code>","text":"<p>Deletes the current user's Firebase account and associated Firestore document.</p> <p>Details:</p> <ul> <li>Deletes the user account if the user is authenticated.</li> <li>Deletes the user's document from the Firestore <code>users</code> collection.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#save-the-new-user","title":"SAVE THE NEW USER","text":""},{"location":"technical/functions/ViewModels/func1/#method","title":"Method:","text":"<pre><code>saveUserInformation(\n    userID: String, \n    shopPoint: Int, \n    totalExp: Int, \n    consecutiveLogin: Int, \n    totalLogin: Int, \n    level: Int, \n    ownedItems: [String], \n    expBoosterEndDay: Date, \n    lastLogin: Date, \n    dailyReward: Bool, \n    missionRewards: [Bool], \n    blockedUsers: [String], \n    invisibleMsgs: [String], \n    fcmToken: String\n)\n</code></pre> <p>Saves new user information to Firestore.</p> <p>Parameters:</p> <ul> <li><code>userID</code>: The unique identifier for the user.</li> <li><code>shopPoint</code>: The initial shop points for the user.</li> <li><code>totalExp</code>: The initial experience points for the user.</li> <li><code>consecutiveLogin</code>: The initial value of consecutive logins.</li> <li><code>totalLogin</code>: The initial total login count.</li> <li><code>level</code>: The initial user level.</li> <li><code>ownedItems</code>: A list of items owned by the user.</li> <li><code>expBoosterEndDay</code>: The end date for the experience booster.</li> <li><code>lastLogin</code>: The last login date.</li> <li><code>dailyReward</code>: Indicates if the daily reward has been collected.</li> <li><code>missionRewards</code>: A list of boolean values indicating mission rewards status.</li> <li><code>blockedUsers</code>: A list of blocked user IDs.</li> <li><code>invisibleMsgs</code>: A list of hidden message IDs.</li> <li><code>fcmToken</code>: The FCM token for notifications.</li> </ul> <p>Details:</p> <ul> <li>Constructs a dictionary with user data.</li> <li>Saves the dictionary to Firestore in the <code>users</code> collection.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#update-server-values","title":"UPDATE SERVER VALUES","text":""},{"location":"technical/functions/ViewModels/func1/#updatefcmtokenfcmtoken-string-async","title":"<code>updateFCMToken(fcmToken: String) async</code>","text":"<p>Updates the Firebase Cloud Messaging (FCM) token for the current user in Firestore.</p> <p>Parameters:</p> <ul> <li><code>fcmToken</code>: The new FCM token to be updated for the user.</li> </ul> <p>Details:</p> <ul> <li>Retrieves the current user's UID.</li> <li>Attempts to update the FCM token in Firestore under the <code>fcmToken</code> field.</li> <li>Handles errors by printing the error message if the update fails.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#updateexpboosterdayincrease-int","title":"<code>updateExpBooster(dayIncrease: Int)</code>","text":"<p>Updates the <code>expBoosterEndDay</code> value in Firestore based on the given number of days to increase.</p> <p>Parameters:</p> <ul> <li><code>dayIncrease</code>: The number of days to add to the current expiration date.</li> </ul> <p>Details:</p> <ul> <li>Retrieves the current user's UID.</li> <li>Fetches the existing expiration date of the experience booster from Firestore.</li> <li>Calculates the new expiration date by adding the specified number of days.</li> <li>Updates the <code>expBoosterEndDay</code> field in Firestore with the new expiration date.</li> <li>Handles errors by printing an error message if the update fails.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#updateowneditemslistitem-string","title":"<code>updateOwnedItemsList(item: String)</code>","text":"<p>Adds a new item to the user's list of owned items in Firestore.</p> <p>Parameters:</p> <ul> <li><code>item</code>: The item to be added to the owned items list.</li> </ul> <p>Details:</p> <ul> <li>Retrieves the current user's UID.</li> <li>Fetches the current list of owned items from Firestore.</li> <li>Adds the new item to the list if it is not already present.</li> <li>Updates the <code>ownedItems</code> field in Firestore with the new list of owned items.</li> <li>Handles errors by printing an error message if the update fails.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#updatelevel","title":"<code>updateLevel()</code>","text":"<p>Updates the user's level, logo, and experience points based on the current level and experience.</p> <p>Details:</p> <ul> <li>Retrieves the current user's UID.</li> <li>Fetches the current user level and experience points from Firestore.</li> <li>Checks if the experience points exceed the current level cap.</li> <li>If so, increments the user level, resets the experience points, and updates the level and logo information.</li> <li>Updates the user's level and experience points in Firestore.</li> <li>Fetches and updates the new level logo.</li> <li>Handles errors by printing appropriate messages if any operations fail.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#updateexppointaddexppoint-int","title":"<code>updateExpPoint(addExpPoint: Int)</code>","text":"<p>Increases the user's total experience points in Firestore.</p> <p>Parameters:</p> <ul> <li><code>addExpPoint</code>: The number of experience points to add.</li> </ul> <p>Details:</p> <ul> <li>Retrieves the current user's UID.</li> <li>Updates the <code>totalExp</code> field in Firestore by incrementing it with the specified number of experience points.</li> <li>Handles errors by printing an error message if the update fails.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#updateshoppointsnewshoppoint-int","title":"<code>updateShopPoints(newShopPoint: Int)</code>","text":"<p>Updates the user's shop points in Firestore.</p> <p>Parameters:</p> <ul> <li><code>newShopPoint</code>: The amount to increment the shop points.</li> </ul> <p>Details:</p> <ul> <li>Retrieves the current user's UID.</li> <li>Updates the <code>shopPoint</code> field in Firestore by incrementing it with the specified amount.</li> <li>Fetches the updated shop points from Firestore and updates the local <code>shopPoint</code> property.</li> <li>Handles errors by printing an error message if the update fails.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#updatedailylogin","title":"<code>updateDailyLogin()</code>","text":"<p>Updates the last login date and manages consecutive login and daily rewards based on the last login date.</p> <p>Details:</p> <ul> <li>Retrieves the current user's UID.</li> <li>Fetches the last login date from Firestore.</li> <li>Compares the last login date with the current date to determine if the login is consecutive or not.</li> <li>Updates consecutive login count, daily rewards, and mission rewards accordingly.</li> <li>Updates the <code>lastLogin</code> field in Firestore with the current date.</li> <li>Handles errors by printing an error message if the update fails.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#updatemissionrewardsnewarray-arraybool","title":"<code>updateMissionRewards(newArray: Array&lt;Bool&gt;)</code>","text":"<p>Updates the status of mission rewards in Firestore.</p> <p>Parameters:</p> <ul> <li><code>newArray</code>: An array of boolean values representing the status of mission rewards.</li> </ul> <p>Details:</p> <ul> <li>Retrieves the current user's UID.</li> <li>Updates the <code>missionRewards</code> field in Firestore with the new array of reward statuses.</li> <li>Handles errors by printing an error message if the update fails.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#updatedailyrewardsvalue-bool","title":"<code>updateDailyRewards(value: Bool)</code>","text":"<p>Updates the daily reward status for the user in Firestore.</p> <p>Parameters:</p> <ul> <li><code>value</code>: A boolean indicating whether the daily reward has been collected.</li> </ul> <p>Details:</p> <ul> <li>Retrieves the current user's UID.</li> <li>Updates the <code>dailyReward</code> field in Firestore with the specified value.</li> <li>Handles errors by printing an error message if the update fails.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#updateconsecutiveloginincrement-int","title":"<code>updateConsecutiveLogin(increment: Int)</code>","text":"<p>Updates the consecutive login count in Firestore based on the provided increment value.</p> <p>Parameters:</p> <ul> <li><code>increment</code>: The value to increment the consecutive login count (usually 1).</li> </ul> <p>Details:</p> <ul> <li>Retrieves the current user's UID.</li> <li>Updates the <code>consecutiveLogin</code> field in Firestore by incrementing it with the specified value or resetting it.</li> <li>Fetches and updates the local <code>cons_login_value</code> property.</li> <li>Handles errors by printing an error message if the update fails.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#addblockeduserlistuuid-string","title":"<code>addBlockedUserList(uuid: String)</code>","text":"<p>Adds a user ID to the blocked users list in Firestore.</p> <p>Parameters:</p> <ul> <li><code>uuid</code>: The user ID to be added to the blocked users list.</li> </ul> <p>Details:</p> <ul> <li>Retrieves the current user's UID.</li> <li>Fetches the current list of blocked users from Firestore.</li> <li>Adds the new user ID to the list if it is not already present.</li> <li>Updates the <code>blockedUsers</code> field in Firestore with the new list.</li> <li>Handles errors by printing an error message if the update fails.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#removeblockeduserlistuuid-string","title":"<code>removeBlockedUserList(uuid: String)</code>","text":"<p>Removes a user ID from the blocked users list in Firestore.</p> <p>Parameters:</p> <ul> <li><code>uuid</code>: The user ID to be removed from the blocked users list.</li> </ul> <p>Details:</p> <ul> <li>Retrieves the current user's UID.</li> <li>Fetches the current list of blocked users from Firestore.</li> <li>Removes the user ID from the list if it is present.</li> <li>Updates the <code>blockedUsers</code> field in Firestore with the updated list.</li> <li>Handles errors by printing an error message if the update fails.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#addhiddenchatlistuuid-string","title":"<code>addHiddenChatList(uuid: String)</code>","text":"<p>Adds a user ID to the hidden messages list in Firestore.</p> <p>Parameters:</p> <ul> <li><code>uuid</code>: The user ID to be added to the hidden messages list.</li> </ul> <p>Details:</p> <ul> <li>Retrieves the current user's UID.</li> <li>Fetches the current list of hidden messages from Firestore.</li> <li>Adds the new user ID to the list if it is not already present.</li> <li>Updates the <code>hiddenMsgs</code> field in Firestore with the new list.</li> <li>Handles errors by printing an error message if the update fails.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#removehiddenchatlistuuid-string","title":"<code>removeHiddenChatList(uuid: String)</code>","text":"<p>Removes a user ID from the hidden messages list in Firestore.</p> <p>Parameters:</p> <ul> <li><code>uuid</code>: The user ID to be removed from the hidden messages list.</li> </ul> <p>Details:</p> <ul> <li>Retrieves the current user's UID.</li> <li>Fetches the current list of hidden messages from Firestore.</li> <li>Removes the user ID from the list if it is present.</li> <li>Updates the <code>hiddenMsgs</code> field in Firestore with the updated list.</li> <li>Handles errors by printing an error message if the update fails.</li> </ul>"},{"location":"technical/functions/ViewModels/func1/#get-server-values","title":"GET SERVER VALUES","text":""},{"location":"technical/functions/ViewModels/func1/#getuserdataparameternamecompletion","title":"<code>getUserData(parameterName:completion:)</code>","text":"<p>Description:  Fetches a specific piece of data for the current user from the <code>users</code> collection in Firebase Firestore. The data is identified by the parameter name provided. </p> <p>Parameters:</p> <ul> <li><code>parameterName</code>: The name of the parameter to retrieve (e.g., \"level\", \"totalExp\").</li> <li><code>completion</code>: A closure that is called with the retrieved data.</li> </ul> <p>Usage:  This function retrieves data asynchronously from the Firestore database and passes it to the completion handler.</p> <p>Note: Becarefull when use this method if parameter is not match app will crash. Check the paramters</p>"},{"location":"technical/functions/ViewModels/func1/#getuserdatasparametername","title":"<code>getUserDatas(parameterName:)</code>","text":"<p>Description: </p> <p>Asynchronously retrieves a specific piece of data for the current user from the <code>users</code> collection in Firebase Firestore, using async/await syntax.</p> <p>Parameters:</p> <ul> <li><code>parameterName</code>: The name of the parameter to retrieve.</li> </ul> <p>Returns:</p> <ul> <li><code>Any</code>: The retrieved data or an error if the user is unauthorized.</li> </ul> <p>Note: Becarefull when use this method if parameter is not match app will crash. Check the paramters</p> <p>Usage:  Use this method to asynchronously fetch user data. It returns the value directly or throws an error if fetching fails.</p>"},{"location":"technical/functions/ViewModels/func1/#getleveldatalevelparameternamecompletion","title":"<code>getLevelData(level:parameterName:completion:)</code>","text":"<p>Description:  Fetches a specific piece of data related to a particular level from the <code>levels</code> collection in Firebase Firestore.</p> <p>Parameters:</p> <ul> <li><code>level</code>: The level identifier (e.g., \"1\", \"2\").</li> <li><code>parameterName</code>: The name of the parameter to retrieve (e.g., \"logo\", \"cap\").</li> <li><code>completion</code>: A closure that is called with the retrieved data.</li> </ul> <p>Usage:  This function is used to fetch data about game levels and pass the result to a completion handler.</p>"},{"location":"technical/functions/ViewModels/func1/#getcurrentleveldata","title":"<code>getCurrentLevelData()</code>","text":"<p>Description:  Retrieves the current user's level information, including the level logo, level cap, total experience points, and consecutive login value.</p> <p>Usage:  Calls <code>getUserData</code> and <code>getLevelData</code> to gather and update all relevant level and user experience information.</p>"},{"location":"technical/functions/ViewModels/func1/#getdailyinformation","title":"<code>getDailyInformation()</code>","text":"<p>Description:  Retrieves and updates the status of daily rewards and mission rewards for the current user.</p> <p>Usage:  Fetches daily and mission rewards data from Firebase and updates local properties accordingly.</p>"},{"location":"technical/functions/ViewModels/func1/#getremainingtimecompletion","title":"<code>getRemainingTime(completion:)</code>","text":"<p>Description:  Calculates the remaining time for an active booster and returns it in seconds. The booster end date is fetched and compared to the current date.</p> <p>Parameters:</p> <ul> <li><code>completion</code>: A closure that is called with the remaining time in seconds.</li> </ul> <p>Usage:  Fetches the expiration date of a booster, calculates the remaining time, and returns it via the completion handler.</p>"},{"location":"technical/functions/ViewModels/func1/#isloggedinsameday-bool","title":"<code>isLoggedInSameDay() -&gt; Bool</code>","text":"<p>Description:  Determines if the last login day is the same as the current day.</p> <p>Returns:</p> <ul> <li><code>Bool</code>: <code>true</code> if the user logged in today, <code>false</code> otherwise.</li> </ul> <p>Usage:  Used to check if the user has logged in on the same day for reward or login tracking purposes.</p>"},{"location":"technical/functions/ViewModels/func1/#isinblockedlistuuid","title":"<code>isInBlockedList(uuid:)</code>","text":"<p>Description:  Checks if a specific user ID is present in the current user's blocked list.</p> <p>Parameters:</p> <ul> <li><code>uuid</code>: The user ID to check.</li> </ul> <p>Returns:</p> <ul> <li><code>Bool</code>: <code>true</code> if the user ID is in the blocked list, <code>false</code> otherwise.</li> </ul> <p>Usage:  Asynchronously checks if a user ID is blocked by querying the Firestore document.</p>"},{"location":"technical/functions/ViewModels/func1/#isinhiddenmessageslistuuid","title":"<code>isInHiddenMessagesList(uuid:)</code>","text":"<p>Description:  Checks if a specific user ID is present in the current user's hidden messages list.</p> <p>Parameters:</p> <ul> <li><code>uuid</code>: The user ID to check.</li> </ul> <p>Returns:</p> <ul> <li><code>Bool</code>: <code>true</code> if the user ID is in the hidden messages list, <code>false</code> otherwise.</li> </ul> <p>Usage:  Asynchronously checks if a user ID is hidden from the message list.</p>"},{"location":"technical/functions/ViewModels/func1/#senderlevellogouuid","title":"<code>senderLevelLogo(uuid:)</code>","text":"<p>Description:  Fetches the level logo for a given sender's user ID.</p> <p>Parameters:</p> <ul> <li><code>uuid</code>: The user ID of the message sender.</li> </ul> <p>Returns:</p> <ul> <li><code>String</code>: The level logo of the sender.</li> </ul> <p>Usage:  Asynchronously retrieves the level logo for a specific user by first fetching their level and then fetching the corresponding logo from the <code>levels</code> collection.</p>"},{"location":"technical/functions/ViewModels/func1/#isuserowneditemitem_name","title":"<code>isUserOwnedItem(item_name:)</code>","text":"<p>Description:  Checks if the current user owns a specific item.</p> <p>Parameters:</p> <ul> <li><code>item_name</code>: The name of the item to check.</li> </ul> <p>Returns:</p> <ul> <li><code>Bool</code>: <code>true</code> if the item is owned, <code>false</code> otherwise.</li> </ul> <p>Usage:  Asynchronously checks if a specific item is present in the user's list of owned items. If an error occurs or the item is not found, it returns <code>false</code>.</p>"},{"location":"technical/services/chat/","title":"In App Chat","text":"<p>This chat feature is available to all app users who have an account, enabling them to participate in conversations. The service also offers user support through this platform. In the future, we intend to provide a comprehensive manual covering the usage of the chat functionality, how to request support via chat, and guidelines for chat etiquette. There are four scripts directly related to this service: MsgMenuModel.swift, ChatRow.swift, GlobalChatView.swift, and EmojiListView.swift.</p>"},{"location":"technical/services/chat/#msgmenumodel","title":"MsgMenuModel","text":"<p>The <code>MsgMenuModel</code> class manages messaging functionality within an app, integrating Firestore for database operations and SwiftUI for user interface updates.</p>"},{"location":"technical/services/chat/#properties","title":"Properties","text":"<ul> <li>txt: A published property to store text input for messages.</li> <li>userAvatar: A published property representing the avatar URL of the current user.</li> <li>imageUrlPath: A published property holding the path to an image's download URL.</li> <li>msgs: A published array of <code>MsgModel</code> objects, storing messages fetched from Firestore.</li> <li>image_is_ready: A published boolean indicating whether an image is ready for display.</li> <li>msg_data: A published <code>MsgModel</code> instance used for storing new message data.</li> <li>msg_Index: An index used for managing message operations.</li> <li>showLevel: A boolean flag indicating whether to display the user's level.</li> </ul>"},{"location":"technical/services/chat/#initialization","title":"Initialization","text":"<p>The initializer (<code>init()</code>) initializes the <code>MsgMenuModel</code> instance by calling <code>readAllMsgs()</code> to fetch existing messages from Firestore.</p>"},{"location":"technical/services/chat/#methods","title":"Methods","text":"<ul> <li> <p>alertView(title:message:): Creates and returns a UIAlertController with a given title and message. Includes a default \"OK\" action.</p> </li> <li> <p>readAllMsgs(): Sets up a snapshot listener on the \"Msgs\" collection in Firestore to listen for changes (additions, modifications, removals) to messages. Updates the <code>msgs</code> array accordingly.</p> </li> <li> <p>writeMsg(path:text:user:name:iconPath:uuid:): Writes a new message to the Firestore database using data provided. Clears <code>txt</code> and <code>imageUrlPath</code> after successful write.</p> </li> <li> <p>uploadImageToStorage(image:completion:): Uploads an image to Firebase Storage, resizes it to fit within a 500x500 pixel boundary, and returns the download URL upon successful upload.</p> </li> <li> <p>resizeImage(image:targetSize:): Resizes a given UIImage to a specified target size.</p> </li> <li> <p>fetchAvatar(): Fetches the avatar URL (<code>iconPath</code>) of the user from Firestore. Updates <code>userAvatar</code> on the main thread.</p> </li> <li> <p>hideBlockedUserMessages(uuid:): Filters out messages from <code>msgs</code> where the <code>uuid</code> matches the blocked user's <code>uuid</code>.</p> </li> <li> <p>hideMessage(data:index:): (Currently not used due to async bug) Removes a message at a specified index and inserts updated data at the same index.</p> </li> <li> <p>hideFromTheList(index:): Removes a message from <code>msgs</code> at a specified index.</p> </li> <li> <p>showInTheList(data:index:): Inserts a message into <code>msgs</code> at a specified index.</p> </li> </ul>"},{"location":"technical/services/chat/#usage","title":"Usage","text":"<ol> <li> <p>Initialization:    <pre><code>let model = MsgMenuModel()\n</code></pre>    Initializes the model, triggering the retrieval of existing messages from Firestore.</p> </li> <li> <p>Message Handling:    <pre><code>model.writeMsg(path: imagePath, text: messageText, user: userID, name: userName, iconPath: userAvatarPath, uuid: messageUUID)\n</code></pre>    Writes a new message to Firestore with the specified parameters.</p> </li> <li> <p>Image Upload:    <pre><code>model.uploadImageToStorage(image: selectedImage) { imageURL in\n    // Handle image upload completion\n}\n</code></pre>    Uploads an image to Firebase Storage and retrieves its download URL upon completion.</p> </li> <li> <p>Avatar Fetching:    <pre><code>model.fetchAvatar()\n</code></pre>    Retrieves the current user's avatar URL from Firestore.</p> </li> </ol>"},{"location":"technical/services/chat/#chatrow","title":"ChatRow","text":"<p>The <code>ChatRow</code> struct represents a SwiftUI view used for displaying chat messages within an app, integrated with Firebase Firestore and SDWebImageSwiftUI for image handling.</p>"},{"location":"technical/services/chat/#properties_1","title":"Properties","text":"<ul> <li>loginVM: An <code>EnvironmentObject</code> of type <code>AccountServiceViewModel</code> for managing user authentication.</li> <li>settings: An <code>EnvironmentObject</code> of type <code>SettingBindingValues</code> providing app settings.</li> <li>msgData: An <code>EnvironmentObject</code> of type <code>MsgMenuModel</code> handling message-related data.</li> <li>userInfoVM: An <code>EnvironmentObject</code> of type <code>FirebaseUserInfoViewModel</code> managing user information and interactions.</li> <li>imageManager: An <code>ObservedObject</code> of type <code>ImageManager</code> for managing image loading and cancellation.</li> <li>chatData: A <code>MsgModel</code> object representing the chat message data to be displayed.</li> <li>image_isReady: A <code>@State</code> variable indicating if an image is ready for display.</li> <li>showReportReason: A <code>@State</code> variable controlling the visibility of the report reason dialog.</li> <li>blocked: A <code>@State</code> variable indicating if the user associated with the chat message is blocked.</li> <li>hidden: A <code>@State</code> variable indicating if the chat message is hidden.</li> <li>logo: A <code>@State</code> variable holding the URL path for the sender's level logo.</li> <li>isAnimating: A <code>@State</code> variable controlling animation states.</li> </ul>"},{"location":"technical/services/chat/#components","title":"Components","text":"<ul> <li>AsyncImage: Loads and displays user profile images asynchronously.</li> <li>NickName: Custom view displaying user nicknames.</li> <li>AnimatedImage: Loads and displays animated images from URLs.</li> <li>ChatBubble: Custom shape for chat message bubbles.</li> </ul>"},{"location":"technical/services/chat/#functionality","title":"Functionality","text":"<ul> <li>Message Display: Displays chat messages with appropriate styling based on the sender (<code>current_user</code> or guest).</li> <li>User Interaction: Provides context menus for blocking users, reporting messages, showing/hiding messages, and deleting own messages.</li> <li>Image Handling: Supports loading and displaying images within chat messages.</li> <li>User Profile: Displays user profile information including avatar and nickname.</li> <li>Dynamic Updates: Updates message visibility (<code>hidden</code>), blocked user status (<code>blocked</code>), and sender's level logo (<code>logo</code>) dynamically.</li> </ul>"},{"location":"technical/services/chat/#usage_1","title":"Usage","text":"<pre><code>struct ContentView: View {\n    @EnvironmentObject var msgMenuModel = MsgMenuModel()\n    ...\n    ...\n    ...\n\n\n    var body: some View {\n        List(msgMenuModel.msgs) { msg in\n            ChatRow(chatData: msg)\n                .environmentObject(MsgMenuModel())\n                ...\n                ...\n                ...\n        }\n    }\n}\n</code></pre>"},{"location":"technical/services/chat/#globalchatview","title":"GlobalChatView","text":"<p>The <code>GlobalChatView</code> SwiftUI component is designed for a chat interface that supports sending messages, uploading images, and selecting emojis. It integrates Firebase for authentication and messaging, and utilizes various environment objects for managing app state and user data. </p>"},{"location":"technical/services/chat/#dependencies","title":"Dependencies","text":"<ul> <li>SwiftUI: Provides the framework for building user interfaces.</li> <li>BottomSheet: Enables bottom sheet functionality for showing emojis.</li> <li>SDWebImageSwiftUI: Handles asynchronous image loading and caching.</li> <li>Firebase: Backend service for user authentication and real-time messaging.</li> </ul>"},{"location":"technical/services/chat/#state-management","title":"State Management","text":"<ul> <li>@EnvironmentObject:</li> <li><code>msgData</code>: Manages chat messages and state.</li> <li><code>loginVM</code>: Handles user authentication and session management.</li> <li><code>userInfoVM</code>: Manages user information from Firebase.</li> <li><code>settings</code>: Manages app settings such as theme and colors.</li> <li><code>envManager</code>: Manages environment-specific settings.</li> <li><code>missionVM</code>: Handles mission-related tasks and rewards.</li> <li><code>notification</code>: Manages notifications to other devices.</li> <li> <p><code>url_params</code>: Manages selected URL for emojis.</p> </li> <li> <p>@AppStorage:</p> </li> <li> <p><code>background_theme</code>, <code>text_color</code>, <code>text_style</code>: Persist app settings like background theme and font styles.</p> </li> <li> <p>@State:</p> </li> <li> <p><code>showAlert</code>, <code>scrolled</code>, <code>showLogOutOptions</code>, <code>showImagePicker</code>, <code>image</code>, <code>emoji_url</code>, <code>showLogInAlert</code>, <code>isNotLoggedIN</code>, <code>message</code>, <code>showOptional</code>, <code>imagePreview</code>, <code>showingOverlay</code>, <code>isPlaying</code>: Local state variables for managing UI state and user interaction.</p> </li> <li> <p>@FocusState:</p> </li> <li><code>isFocused</code>, <code>focus</code>: Manages focus state for text fields (<code>CustomTextField</code>).</li> </ul>"},{"location":"technical/services/chat/#views-and-components","title":"Views and Components","text":"<ul> <li>Main Layout:</li> <li>Uses <code>GeometryReader</code> to dynamically adjust layout based on screen size.</li> <li> <p>Embeds components in a <code>VStack</code> for vertical stacking.</p> </li> <li> <p>Chat Section:</p> </li> <li>Displays chat messages in a <code>ScrollView</code> with <code>ScrollViewReader</code> for message scrolling.</li> <li> <p>Messages are dynamically updated using <code>onChange</code> and <code>task</code>.</p> </li> <li> <p>Image and Emoji Preview:</p> </li> <li> <p>Displays selected images and emojis as overlays using <code>overlay</code>.</p> </li> <li> <p>Bottom Section:</p> </li> <li>Contains buttons for adding images (<code>showImagePicker</code>) and emojis (<code>showingOverlay</code>).</li> <li> <p>Uses <code>CustomTextField</code> for message input.</p> </li> <li> <p>Top Section:</p> </li> <li>Custom toolbar (<code>toolbar</code>) with back button, chat title, and user avatar.</li> <li>Utilizes <code>fullScreenCover</code> for image picker and <code>sheet</code> for sign-in view.</li> </ul>"},{"location":"technical/services/chat/#interaction-and-logic","title":"Interaction and Logic","text":"<ul> <li>Authentication and State Management:</li> <li>Handles authentication status and user data using Firebase.</li> <li> <p>Manages app settings and theme changes dynamically.</p> </li> <li> <p>Messaging and Notifications:</p> </li> <li>Allows users to send messages with optional images and emojis.</li> <li>Sends notifications to other devices using Firebase Cloud Messaging.</li> </ul>"},{"location":"technical/services/chat/#previews-and-utility-components","title":"Previews and Utility Components","text":"<ul> <li>MessagePlaceholder: Placeholder view for message input.</li> <li>CustomTextField: Customized text field component with support for emojis.</li> </ul>"},{"location":"technical/services/chat/#extensions-and-utilities","title":"Extensions and Utilities","text":"<ul> <li>UIApplication Extension:</li> <li>Utility method (<code>hideKeyboard</code>) to dismiss the keyboard.</li> </ul>"},{"location":"technical/services/chat/#emojilistview","title":"EmojiListView","text":"<p>The <code>EmojiListView</code> SwiftUI component is designed to display and select emojis for use in a chat interface. It provides a horizontal scroll view for emoji categories and a grid view for displaying individual emojis within a selected category. The component supports dynamic loading of emoji images using SDWebImageSwiftUI for improved performance.</p>"},{"location":"technical/services/chat/#dependencies_1","title":"Dependencies","text":"<ul> <li>SwiftUI: Provides the framework for building user interfaces.</li> <li>SDWebImageSwiftUI: Handles asynchronous image loading and caching for smooth emoji display.</li> <li>UIApplication Extension: Provides utility to retrieve the current active UI window.</li> </ul>"},{"location":"technical/services/chat/#state-management_1","title":"State Management","text":"<ul> <li>@Binding:</li> <li><code>showing</code>: Manages the visibility of the emoji list view.</li> <li> <p><code>play</code>: Controls the animation state of emojis.</p> </li> <li> <p>@EnvironmentObject:</p> </li> <li><code>url_params</code>: Manages URL lists for emojis.</li> <li> <p><code>settings</code>: Manages app settings and emoji ownership.</p> </li> <li> <p>@ObservedObject:</p> </li> <li> <p><code>imageManager</code>: Manages the loading and cancelation of emoji images.</p> </li> <li> <p>@State:</p> </li> <li><code>owned</code>: Tracks whether the user owns a specific emoji category.</li> <li><code>item</code>: Tracks the currently selected emoji category.</li> <li><code>link</code>: Stores the URL link of selected emojis.</li> </ul>"},{"location":"technical/services/chat/#views-and-components_1","title":"Views and Components","text":"<ul> <li>Emoji Type Preview:</li> <li>Horizontal <code>ScrollView</code> showing preview images of emoji categories.</li> <li> <p>Each category image is loaded dynamically from a predefined list of URLs.</p> </li> <li> <p>Emoji List Preview:</p> </li> <li>Vertical <code>ScrollView</code> displaying individual emojis in a grid layout (<code>LazyVGrid</code>).</li> <li>Emojis are loaded dynamically based on the selected category (<code>selected_url_list</code>).</li> </ul>"},{"location":"technical/services/chat/#interaction-and-logic_1","title":"Interaction and Logic","text":"<ul> <li>Emoji Selection:</li> <li>Tapping an emoji category updates the displayed emoji list (<code>selected_url_list</code>).</li> <li> <p>Emojis are displayed in a grid and can be selected for use in the chat interface.</p> </li> <li> <p>Emoji Ownership:</p> </li> <li>Lock icon overlay indicates emojis that the user does not own (<code>!settings.ownedEmojis.contains(...)</code>).</li> </ul>"},{"location":"technical/services/chat/#utility-and-extensions","title":"Utility and Extensions","text":"<ul> <li>UIApplication Extension:</li> <li><code>currentUIWindow()</code>: Retrieves the current active UI window, useful for handling UI interactions or transitions.</li> </ul>"},{"location":"technical/services/iap/","title":"In App Purchase","text":"<p>The <code>PurchaseManager</code> class manages in-app purchases for a iOS application using the StoreKit framework. It provides functionalities to load available products, initiate purchases, and manage purchased product states.</p>"},{"location":"technical/services/iap/#class-declaration","title":"Class Declaration","text":"<pre><code>@MainActor\nclass PurchaseManager: NSObject, ObservableObject\n</code></pre> <ul> <li>Inherits from <code>NSObject</code> and conforms to <code>ObservableObject</code> to facilitate SwiftUI integration for observing changes in data.</li> <li>Annotated with <code>@MainActor</code> to ensure all operations are executed on the main thread, which is necessary for interacting with SwiftUI components.</li> </ul>"},{"location":"technical/services/iap/#properties","title":"Properties","text":"<ul> <li><code>productsIds</code>: Array containing identifiers of in-app purchase products as defined in App Store Connect.</li> <li><code>products</code>: Published array of <code>Product</code> objects representing the available in-app purchase items.</li> <li><code>purchasedProductIds</code>: Set containing identifiers of purchased in-app products.</li> <li><code>productsLoaded</code>: Boolean flag to track whether products have been loaded.</li> <li><code>updates</code>: Optional <code>Task</code> to observe transaction updates asynchronously.</li> </ul>"},{"location":"technical/services/iap/#initialization","title":"Initialization","text":"<pre><code>override init() {\n    super.init()\n    updates = observeTransactionUpdates()\n    SKPaymentQueue.default().add(self)\n}\n</code></pre> <ul> <li>Initializes the <code>PurchaseManager</code>, sets up transaction observers (<code>SKPaymentTransactionObserver</code>), and starts observing transaction updates.</li> </ul>"},{"location":"technical/services/iap/#deinitialization","title":"Deinitialization","text":"<pre><code>deinit {\n    updates?.cancel()\n}\n</code></pre> <ul> <li>Cancels the <code>updates</code> task when the <code>PurchaseManager</code> is deallocated to clean up resources.</li> </ul>"},{"location":"technical/services/iap/#methods","title":"Methods","text":"<ol> <li>observeTransactionUpdates</li> <li>Observes transaction updates asynchronously.</li> <li> <p>Detects changes in transaction states and updates purchased product states accordingly.</p> </li> <li> <p>loadProducts</p> </li> </ol> <pre><code>func loadProducts() async throws\n</code></pre> <ul> <li>Asynchronously loads available products from the App Store.</li> <li> <p>Sorts products by price for easier display.</p> </li> <li> <p>purchase</p> </li> </ul> <pre><code>func purchase(_ product: Product) async throws -&gt; Bool\n</code></pre> <ul> <li>Initiates a purchase for a specified <code>Product</code>.</li> <li> <p>Handles various purchase outcomes asynchronously:</p> <ul> <li>Returns <code>true</code> if purchase is successfully verified and finished.</li> <li>Returns <code>false</code> for pending, user cancelled, unverified, or unknown states.</li> </ul> </li> <li> <p>updatePurchasedProducts</p> </li> </ul> <pre><code>func updatePurchasedProducts() async\n</code></pre> <ul> <li>Asynchronously updates the set of purchased product IDs based on transaction receipts.</li> <li>Handles verification and revocation of purchased products.</li> </ul>"},{"location":"technical/services/iap/#extensions","title":"Extensions","text":"<ul> <li> <p>SKPaymentTransactionObserver</p> </li> <li> <p>Conformance to <code>SKPaymentTransactionObserver</code> protocol to receive transaction updates and handle payment queue events.</p> </li> </ul>"},{"location":"technical/services/iap/#usage","title":"Usage","text":"<ol> <li>Initialization</li> </ol> <pre><code>let purchaseManager = PurchaseManager()\n</code></pre> <ul> <li> <p>Creates an instance of <code>PurchaseManager</code> to manage in-app purchases.</p> </li> <li> <p>Loading Products</p> </li> </ul> <pre><code>do {\n    try await purchaseManager.loadProducts()\n} catch {\n    print(\"Failed to load products: \\(error.localizedDescription)\")\n}\n</code></pre> <ul> <li> <p>Asynchronously loads products from the App Store.</p> </li> <li> <p>Purchasing Products</p> </li> </ul> <pre><code>do {\n    let success = try await purchaseManager.purchase(product)\n    if success {\n        // Handle successful purchase\n    } else {\n        // Handle failed purchase\n    }\n} catch {\n    // Handle purchase error\n}\n</code></pre> <ul> <li>Initiates a purchase for a specified product.</li> </ul>"},{"location":"technical/services/iap/#product-details","title":"Product Details","text":"<ul> <li>Products: There are a total of 7 consumable products available for purchase.</li> <li>Localization: All products are localized in Japanese and Simplified Chinese.</li> <li>Default Language: The default language is English (U.S.).</li> </ul>"},{"location":"technical/services/iap/#product-list","title":"Product List","text":"<ol> <li> <p>500 Cheer</p> <ul> <li>Price: 500 JPY</li> </ul> </li> <li> <p>1000 Cheer</p> <ul> <li>Price: 1000 JPY</li> </ul> </li> <li> <p>3000 Cheer</p> <ul> <li>Price: 3000 JPY</li> </ul> </li> <li> <p>5000 Cheer</p> <ul> <li>Price: 5000 JPY</li> </ul> </li> <li> <p>10000 Cheer</p> <ul> <li>Price: 10000 JPY</li> </ul> </li> <li> <p>30000 Cheer</p> <ul> <li>Price: 30000 JPY</li> </ul> </li> <li> <p>50000 Cheer</p> <ul> <li>Price: 50000 JPY</li> </ul> </li> </ol>"},{"location":"technical/services/iap/#currency-convertion","title":"Currency Convertion","text":"<p>Prices are automatically converted for other regions based on the App Store's currency conversion rates.</p>"},{"location":"technical/services/reward/","title":"Rewards System","text":""},{"location":"technical/services/reward/#ways-to-earn-rewards","title":"Ways to Earn Rewards","text":"<p>There are three ways for users to earn rewards:</p> <ol> <li> <p>Daily Consecutive Login Rewards: Users receive rewards for logging in consecutively each day. Missing a day resets the consecutive login count in Firebase Firestore. The rewards for each day are:</p> <ul> <li>Day 1: 25 experience points (exp) and shopping points</li> <li>Day 2: A random font color</li> <li>Day 3: 50 exp and shopping points</li> <li>Day 4: A random background color</li> <li>Day 5: 100 exp and shopping points</li> <li>Day 6: 1-day exp multiplier</li> <li>Day 7: 50 cheer coins</li> </ul> </li> <li> <p>Daily Mission Rewards: There are 7 daily missions (tasks) that users can complete to earn exp points and shopping points. Each mission offers different rewards and points. It's important to collect points promptly after completing each mission, as points do not accumulate if not collected. The missions include:</p> <ul> <li>Comment once in chat</li> <li>Watch a live-stream </li> <li>Follow a streamer</li> <li>Send a gift to a streamer</li> <li>Share the app</li> <li>Start a live-stream</li> <li>Purchase cheer coins</li> </ul> </li> <li> <p>Level Rewards: Users automatically level up when they accumulate enough points. The rewards for reaching specific levels are:</p> <ul> <li>Level 2: Option to hide or show the level logo in chat</li> <li>Level 5: A random item from the item shop</li> <li>Level 10: Exp multiplier for 3 days</li> <li>Level 15: A random UI skin</li> <li>Level 20: A random font style</li> <li>Level 25: A random emoji package</li> <li>Level 30: A random animated emoji package</li> </ul> </li> </ol>"},{"location":"technical/services/reward/#daily-consecutive-login","title":"Daily Consecutive Login","text":"<p>In our application, consecutive login tracking is a crucial feature handled by the following components:</p> <ol> <li> <p>FirebaseUserInfoViewModel.swift: This module manages user information within Firebase, including handling consecutive login updates.</p> </li> <li> <p>Cheer_SupportsApp.swift Task: The startup task responsible for initializing app components.</p> </li> </ol>"},{"location":"technical/services/reward/#update-daily-login-and-consecutive-login-logic","title":"Update Daily Login and Consecutive Login Logic","text":"<p>The following functions illustrate how the application updates the consecutive login count based on user activities:</p> <pre><code>// Update consecutive login count based on last login date comparison\nfunc updateDailyLogin() {\n    guard let uid = FirebaseManager.shared.auth.currentUser?.uid else { return }\n\n    // Retrieve last login date from Firebase\n    getUserData(parameterName: UserInfoConstants.lastLogin) { [self] value in\n        let lastLoginDate = (value as AnyObject).dateValue()\n\n        let calendar = NSCalendar.autoupdatingCurrent\n\n        // Compare last login with today's date\n        if calendar.isDateInYesterday(lastLoginDate) {\n            updateConsecutiveLogin(increment: 1)\n        } else if !calendar.isDateInToday(lastLoginDate) {\n            updateConsecutiveLogin(increment: 0)\n        }\n\n        // Update last login date in Firebase\n        FirebaseManager.shared.firestore\n            .collection(FirebaseCollectionConstants.users)\n            .document(uid)\n            .updateData([UserInfoConstants.lastLogin: Date.now]) { error in\n                if let error = error {\n                    print(\"Error updating last login date: \\(error.localizedDescription)\")\n                }\n            }\n    }\n}\n\n// Update consecutive login count in Firebase\nfunc updateConsecutiveLogin(increment: Int) {\n    guard let uid = FirebaseManager.shared.auth.currentUser?.uid else { return }\n\n    FirebaseManager.shared.firestore\n        .collection(FirebaseCollectionConstants.users)\n        .document(uid)\n        .updateData([UserInfoConstants.consecutiveLogin: increment == 1 ? FieldValue.increment(Int64(1)) : 0]) { error in\n            if let error = error {\n                print(\"Error updating consecutive login count: \\(error.localizedDescription)\")\n                return\n            }\n            print(\"Consecutive login count updated successfully.\")\n        }\n}\n</code></pre>"},{"location":"technical/services/reward/#rewards-system-integration","title":"Rewards System Integration","text":"<p>Based on the consecutive login count, users receive rewards, all related functions are in <code>MissionPage.swift</code>:</p> <pre><code>let userInfoVM = FirebaseUserViewModel()\n\n.task {\n    Task {\n        envManager.retrieveData()\n        if !envManager.email.isEmpty {\n            let auth = try await loginVM.authenticate(email: envManager.email, password: envManager.password)\n            .\n            .\n            .\n            // Collect daily login reward based on consecutive login count\n            switch userInfoVM.cons_login_value {\n            case 0:\n                loginRewardDay1()\n            case 1:\n                loginRewardDay2()\n            case 2:\n                loginRewardDay3()\n            case 3:\n                loginRewardDay4()\n            case 4:\n                loginRewardDay5()\n            case 5:\n                loginRewardDay6()\n            case 6:\n                loginRewardDay7()\n            default:\n                print(\"Error: Consecutive login count exceeds limit.\")\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"technical/services/reward/#reset-consecutive-login-count","title":"Reset Consecutive Login Count","text":"<p>When the user logs in consecutively for 7 days, the application resets the consecutive login count:</p> <pre><code>// Reset consecutive login count if it exceeds 6\nfunc resetConsecutiveLogin() {\n    getUserData(parameterName: UserInfoConstants.consecutiveLogin) { value in\n        let consecutiveLogin = value as! Int\n\n        guard let uid = FirebaseManager.shared.auth.currentUser?.uid else { return }\n\n        if consecutiveLogin &gt; 6 {\n            FirebaseManager.shared.firestore\n                .collection(FirebaseCollectionConstants.users)\n                .document(uid)\n                .updateData([UserInfoConstants.consecutiveLogin: 0]) { error in\n                    if let error = error {\n                        print(\"Error resetting consecutive login count: \\(error.localizedDescription)\")\n                        return\n                    }\n                    print(\"Consecutive login count reset successfully.\")\n                }\n        } else {\n            print(\"No need to reset consecutive login count.\")\n        }\n    }\n}\n</code></pre> <p>Consecutive login tracking not only enhances user engagement but also drives user retention through a structured rewards system. These functionalities are crucial for maintaining user interest and loyalty in our application.</p>"},{"location":"technical/services/reward/#daily-mission","title":"Daily Mission","text":"<p>This feature enables users to accumulate shopping points within the app, which can then be used to purchase items.</p> <p>Daily Task Management</p> <p>The daily task management is handled in <code>MissionPage.swift</code>. Initially, all buttons related to tasks are inactive and reset daily. Users can collect rewards once a day upon completing the tasks. </p> <p>Reward Collection Mechanism</p> <p>Rewards are managed through the <code>MissionRewards</code> array in the Firebase Database, located under the <code>User</code> collection. This array tracks daily collections and ensures users can claim rewards once per day if tasks are completed.</p> <p>The shopping points collection system enhances user engagement by providing incentives for completing daily tasks. By utilizing Firebase for storing and managing rewards, the system ensures a seamless and rewarding user experience.</p>"},{"location":"technical/services/reward/#activation-of-collect-button-upon-task-completion","title":"Activation of 'Collect' Button Upon Task Completion","text":"<p>Button activation is managed through the Observable object <code>MissionViewModel.swift</code>, specifically using the public variable <code>disabledButton</code>, which is an array (<code>Array&lt;Bool&gt;</code>).</p> <p>Upon completing a task, the respective button is automatically activated. The following details how each task completion corresponds to button activation within the script:</p> <p>Mission 1 - <code>disabledButton[0]</code>: Activates the \"Send a message\" mission button in the Global Chat View.</p> <p>Mission 2 - <code>disabledButton[1]</code>: Activates the \"Watch livestream\" mission button in the Content View within the <code>.task</code> function of the view.</p> <p>Mission 3 - <code>disabledButton[2]</code>: Activates the \"Follow a streamer\" mission button in the Profile Page View. It checks the user's follower count when the URL changes and sets the initial value.</p> <p>Mission 4 - <code>disabledButton[3]</code>: Activates the \"Send a gift\" mission button in the Content View.</p> <p>Mission 5 - <code>disabledButton[4]</code>: Activates the \"Share the app\" mission button in the Settings Menu.</p> <p>Mission 6 - <code>disabledButton[5]</code>: Activates the \"Start live stream\" mission button in the Content View.</p> <p>Mission 7 - <code>disabledButton[6]</code>: Activates the \"Purchase Cheer Coin\" mission button in the CheerItemPurchase view.</p> <p>This mechanism ensures that users can easily collect their rewards once they have completed the required missions.</p>"},{"location":"technical/services/reward/#level-rewards","title":"Level Rewards","text":"<p>There are a total of 30 levels. When a user levels up, the following function updates the corresponding database value and checks if the level qualifies for a reward. If so, the function initiates the reward reception process.</p> <pre><code>  // When user level up get new logo, level cap information and update totalExp value\n    func updateLevel(){\n\n        guard let uid = FirebaseManager.shared.auth.currentUser?.uid else {return}\n\n        // Get current level\n        getUserData(parameterName: UserInfoConstants.level) { level in\n            var user_level = level as! Int\n            // Get current level cap\n            self.getLevelData(level: \"\\(user_level)\", parameterName: LevelConstants.cap) { cap in\n                let level_cap = cap as! Int\n                // Get current exp\n                self.getUserData(parameterName: UserInfoConstants.totalExp) { exp in\n                    let total_exp = exp as! Int\n\n                    if total_exp &gt;= level_cap {\n                        user_level += 1\n\n                        // Get level reward\n                        self.getLevelReward(level: user_level)\n                        // Reset total exp value\n                        FirebaseManager.shared.firestore.collection(FirebaseCollectionConstants.users).document(uid).updateData([UserInfoConstants.totalExp : total_exp-level_cap])\n                        FirebaseManager.shared.firestore.collection(FirebaseCollectionConstants.users).document(uid).updateData([UserInfoConstants.level : user_level])\n\n                        self.getLevelData(level: \"\\(user_level)\", parameterName: LevelConstants.logo) { logo in\n                            self.levelLogo = logo as! String\n                        }\n                        // Get new level information and update binding values\n                        self.getCurrentLevelData()\n\n                    }\n\n                }\n            }\n        }\n    }\n</code></pre> <p>Below function calling related level reward function.</p> <pre><code>// This function calls the corresponding reward function based on the user's level.\nfunc getLevelReward(level: Int) {\n    switch level {\n        case 2:\n            levelLabelReward()\n        case 5:\n            randomItemReward()\n        case 10:\n            doubleEXPReward()\n        case 15:\n            uiSkinRewards()\n        case 20:\n            fontStyleReward()\n        case 25:\n            emojiReward()\n        default:\n            break\n    }\n}\n</code></pre> <p>You can find this function in <code>FirebaseUserInfoViewModel.swift</code>. </p>"},{"location":"technical/services/services/","title":"Intro","text":""},{"location":"technical/services/services/#overview","title":"Overview","text":"<p>In addition to the website services, three additional services have been integrated into the application to comply with specific App Store Review Guidelines. The Login Reward Service and Chat Service were implemented to meet the requirements of App Store Review Guideline 4.2, while the third service aligns with App Store Review Guideline 3.1.1.</p> <p>User-related information is managed by Firebase, utilizing four main components: Authentication, Cloud Messaging, Storage, and Cloud Firestore.</p> <p>Please note that the information provided here is for preview purposes only. Real credentials and details will be updated once the repository becomes private.</p>"},{"location":"technical/services/services/#credentials","title":"Credentials","text":"<ul> <li>Email: [Admin Email]</li> <li>Password: [Admin Password]</li> </ul>"},{"location":"technical/services/services/#project-details","title":"Project Details","text":"<ul> <li>Project Name: Cheer Supports Iphone only</li> <li>Project ID: cheer-supports-iphone</li> <li>Project Number: 12345676789 (fake)</li> <li>Web API Key: A2039475304ut9euwr40ruw9refu0e9urf (fake)</li> <li>Public Facing Name: Cheer Supports</li> <li>Support Email: test@test.com (fake)</li> </ul>"},{"location":"technical/services/services/#firebase-sdk-setup-and-configuration","title":"Firebase SDK Setup and Configuration","text":"<ul> <li>App ID: 1:299237459823454093868794586 (fake)</li> <li>Encoded App ID: app-1-299237459823454093868794586 (fake)</li> <li>App Nickname: Cheer Supports</li> <li>Bundle ID: com.cheer-supports (fake)</li> <li>App Store ID: 54908673459 (fake)</li> <li>Team ID: J8973U98w4u (fake)</li> </ul>"},{"location":"technical/services/services/#cloud-messaging","title":"Cloud Messaging","text":"<p>Firebase Cloud Messaging API V1 is utilized for notification services.</p> <ul> <li>Sender ID: 439280572 (fake)</li> <li>Service Account: JSON will be added later</li> </ul>"},{"location":"technical/services/services/#apns-setup","title":"APNs Setup","text":"<p>For proper notification functionality, ensure the following:</p> <ul> <li>APNs Auth Key and Production APNs Certificate files are shared separately. These files are crucial for notification services.</li> </ul>"},{"location":"technical/services/services/#legacy-api-deprecation","title":"Legacy API Deprecation","text":"<p>Web Push Certificate is currently used for testing purposes only and was supported by Cloud Messaging API (Legacy) until July 22, 2024. Due to security concerns, Google has announced the shutdown of this API, which will be replaced with Firebase Cloud Messaging API V1. The new API utilizes OAuth 2.0 authentication. For more details, refer to here.</p>"},{"location":"technical/services/services/#access-and-configuration","title":"Access and Configuration","text":"<p>Access to the cloud messaging service requires a Google API access token, obtainable through the service account. The management of this token and the notification service is handled by 'NotificationManager.swift'. For more information about the manager, please check here.</p>"},{"location":"technical/services/aws/authentication/","title":"Authentication","text":""},{"location":"technical/services/aws/authentication/#api-requests-for-web-content-authentication","title":"API Requests for Web Content Authentication","text":""},{"location":"technical/services/aws/authentication/#overview","title":"Overview","text":"<p>To authenticate web content access, the application utilizes two API requests. These requests are implemented in <code>APIService.swift</code> and <code>SignInViewModel.swift</code>, each serving distinct purposes in the authentication process.</p>"},{"location":"technical/services/aws/authentication/#api-request-functions","title":"API Request Functions","text":""},{"location":"technical/services/aws/authentication/#apiserviceswift","title":"<code>APIService.swift</code>","text":"<p>The <code>APIService.swift</code> script manages API interactions related to web content authentication. Specifically, the <code>getLoginData()</code> function within this script handles authentication by retrieving necessary data from external sources. Additionally, <code>APIService.swift</code> manages the storage and processing of user-related parameters essential for authentication.</p>"},{"location":"technical/services/aws/authentication/#signinviewmodelswift","title":"<code>SignInViewModel.swift</code>","text":"<p>In contrast, <code>SignInViewModel.swift</code> focuses solely on authentication verification. It utilizes an API request to verify user credentials and validate access to web content. This component does not handle parameter storage but rather concentrates on the authentication process itself.</p>"},{"location":"technical/services/aws/authentication/#functional-roles","title":"Functional Roles","text":"<ul> <li>APIService.swift: Responsible for retrieving authentication data and managing user parameters required for authentication purposes.</li> <li>SignInViewModel.swift: Concentrates on user authentication verification, ensuring secure access to web content through API interactions.</li> </ul>"},{"location":"technical/services/aws/authentication/#integration-details","title":"Integration Details","text":"<ul> <li>Usage: Utilize <code>APIService.swift</code> for fetching login data and managing user parameters. Refer to <code>SignInViewModel.swift</code> for executing authentication checks and validating user access based on retrieved credentials.</li> </ul>"},{"location":"technical/services/aws/authentication/#signinviewmodel","title":"SignInViewModel","text":""},{"location":"technical/services/aws/authentication/#overview_1","title":"Overview","text":"<p>The <code>SignInViewModel</code> class manages the user interface and network interactions for the sign-in process in the Cheer Supports application. This documentation provides an overview of its structure, functionality, and usage.</p>"},{"location":"technical/services/aws/authentication/#class-structure","title":"Class Structure","text":""},{"location":"technical/services/aws/authentication/#explanation","title":"Explanation","text":""},{"location":"technical/services/aws/authentication/#properties","title":"Properties","text":"<ul> <li> <p>@Published variables: These properties are used for reactive UI updates, allowing the view to update automatically based on changes to <code>email</code>, <code>password</code>, <code>hasError</code>, and <code>isSigningIn</code>.</p> </li> <li> <p>canSignIn: This computed property checks if both <code>email</code> and <code>password</code> are not empty, enabling the sign-in button or action.</p> </li> </ul>"},{"location":"technical/services/aws/authentication/#methods","title":"Methods","text":"<ul> <li>signIn(): Initiates the sign-in process by constructing a <code>URLRequest</code> to the API endpoint (<code>https://api.cheer-supports.com/api/v1/liver/login</code>). It performs Basic Authentication using the provided <code>email</code> and <code>password</code>. Upon receiving the response, it checks for errors and decodes the JSON response using <code>JSONDecoder</code>. If successful, it prints the <code>accessToken</code> from <code>SignInResponse</code>.</li> </ul>"},{"location":"technical/services/aws/authentication/#network-request-handling","title":"Network Request Handling","text":"<ul> <li>The network request (<code>URLSession.shared.dataTask</code>) is performed asynchronously. Upon completion:</li> <li>If there's an <code>error</code> during the request or the HTTP status code is not 200, <code>hasError</code> is set to <code>true</code>.</li> <li>If the response data is received successfully, it attempts to decode it into the <code>SignInResponse</code> structure. Errors during decoding also set <code>hasError</code> to <code>true</code>.</li> </ul>"},{"location":"technical/services/aws/authentication/#error-handling","title":"Error Handling","text":"<ul> <li>Errors are handled both at the network request level and during JSON decoding. They are printed to the console for debugging purposes and set <code>hasError</code> to <code>true</code> to indicate a failed sign-in attempt.</li> </ul>"},{"location":"technical/services/aws/authentication/#usage","title":"Usage","text":""},{"location":"technical/services/aws/authentication/#integration-in-swiftui-views","title":"Integration in SwiftUI Views","text":"<p>You can integrate <code>SignInViewModel</code> into your SwiftUI views as follows:</p> <pre><code>struct SignInView: View {\n    @StateObject private var signInViewModel = SignInViewModel()\n\n    var body: some View {\n        VStack {\n            TextField(\"Email\", text: $signInViewModel.email)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n                .padding()\n\n            SecureField(\"Password\", text: $signInViewModel.password)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n                .padding()\n\n            Button(action: {\n                signInViewModel.signIn()\n            }) {\n                Text(\"Sign In\")\n            }\n            .disabled(!signInViewModel.canSignIn)\n            .padding()\n\n            if signInViewModel.hasError {\n                Text(\"Sign In Failed\")\n                    .foregroundColor(.red)\n            }\n\n            if signInViewModel.isSigningIn {\n                ProgressView()\n            }\n        }\n        .padding()\n    }\n}\n</code></pre>"},{"location":"technical/services/aws/authentication/#example","title":"Example","text":"<p>In your SwiftUI view, bind the text fields to <code>email</code> and <code>password</code>, enable the sign-in button based on <code>canSignIn</code>, and handle UI updates based on <code>hasError</code> and <code>isSigningIn</code>.</p>"},{"location":"technical/services/aws/authentication/#conclusion","title":"Conclusion","text":"<p>The <code>SignInViewModel</code> class encapsulates the logic for signing in users through an API endpoint using Basic Authentication. It provides reactive properties for seamless integration with SwiftUI views, ensuring a smooth user experience while handling network requests and error conditions effectively.</p> <p>This documentation guides you through integrating and understanding the <code>SignInViewModel</code> class within your SwiftUI-based application for managing user sign-in functionality.</p>"},{"location":"technical/services/aws/awsintro/","title":"Overview","text":""},{"location":"technical/services/aws/awsintro/#user-information-management","title":"User Information Management","text":"<p>All user data operations are managed and stored within the <code>AccountServiceViewModel.swift</code> script. This component handles the storage, retrieval, and manipulation of user information throughout the application lifecycle.</p>"},{"location":"technical/services/aws/awsintro/#api-integration","title":"API Integration","text":"<p>API requests are handled by the <code>APIService.swift</code> script. This module encapsulates all interactions with external APIs, facilitating seamless data exchange and integration with remote services.</p>"},{"location":"technical/services/aws/awsintro/#details","title":"Details","text":"<ul> <li> <p>WebView Section: Functions related to WebView interactions can be found within the respective section of the codebase. These functions manage interactions with the application's web-based content, ensuring synchronization with internal data handling mechanisms.</p> </li> <li> <p>Database Section: For a detailed understanding of the application's data structure and interaction with databases, refer to the database section. This section outlines the schema and relationships used within the application's data storage solutions.</p> </li> </ul> <p>This documentation provides a structured overview of where to find and how to utilize functionalities related to user information management, API integration, WebView interactions, and database interactions within the application's technical framework.</p>"},{"location":"technical/services/firebase/auth/","title":"Authentication","text":"<p>The application employs two authentication systems to manage user access and functionality securely.</p>"},{"location":"technical/services/firebase/auth/#1-web-content-authentication-system","title":"1. Web Content Authentication System","text":"<p>The Web Content Authentication System is closely integrated with an AWS database, detailed comprehensively in the support documentation. This system serves as the initial authentication check within the application. If a user is not registered in this system, access to the Firebase Authentication system will not proceed.</p>"},{"location":"technical/services/firebase/auth/#integration-details","title":"Integration Details","text":"<ul> <li>Linked with Firebase: Firebase Authentication is closely integrated with the Web Content Authentication System.</li> <li>Registration Process: Registration is handled through a WebView, seamlessly integrating application-related information from AWS services.</li> </ul> <p>For more information regarding application-specific details, refer to the AWS service page.</p>"},{"location":"technical/services/firebase/auth/#2-firebase-authentication-system","title":"2. Firebase Authentication System","text":"<p>The Firebase Authentication System is essential for features such as Daily Login Rewards and In-App Chat Services. This section provides technical insights into the Firebase Authentication implementation.</p>"},{"location":"technical/services/firebase/auth/#functionality","title":"Functionality","text":"<ul> <li>Purpose: Facilitates secure user authentication necessary for accessing Daily Login Rewards and enabling In-App Chat functionalities.</li> <li>Integration: Seamlessly integrates with other Firebase services to ensure a robust and secure user experience.</li> </ul> <p>This documentation focuses on the technical aspects of the Firebase Authentication System and its role within the application architecture.</p>"},{"location":"technical/services/firebase/auth/#overview","title":"Overview","text":"<p>The authentication service of the iOS application utilizes Firebase Authentication, a robust platform provided by Google Firebase. Firebase Authentication offers secure and easy-to-use authentication methods, supporting authentication using passwords, phone numbers, popular identity providers like Google, Facebook, and more.</p> <p>This document provides a comprehensive guide on integration and how to utilizing Firebase Authentication within iOS application.</p> <p>Currently Only email and password sign-in method enabled. Provided email&amp;password should already registered web content otherwise user cannot registered in Firestore. User UID generated by firebase this uid also used in Cloud Firestore Database. </p>"},{"location":"technical/services/firebase/auth/#firebase-setup","title":"Firebase Setup","text":"<ol> <li> <p>Create Firebase Project:</p> <ul> <li>Go to the Firebase Console (https://console.firebase.google.com/) and create a new project.</li> <li>Follow the setup instructions to add your iOS app to the Firebase project.</li> </ul> </li> <li> <p>Add Firebase SDK:</p> <ul> <li>In your Xcode project, integrate Firebase SDK using Cocoapods or manually by downloading the Firebase SDK from the Firebase Console.</li> </ul> </li> <li> <p>Configure Firebase Authentication:</p> <ul> <li>Enable Authentication service in Firebase Console under the \"Authentication\" section.</li> <li>Configure sign-in methods (e.g., Email/Password, Google Sign-In) as per your application's requirements.</li> </ul> </li> <li> <p>Setup Firebase.plist:</p> <ul> <li>Download <code>GoogleService-Info.plist</code> from Firebase Console and add it to your Xcode project.</li> <li>Ensure the plist is correctly configured with your Firebase project details.</li> </ul> </li> </ol>"},{"location":"technical/services/firebase/auth/#authenticationmanager-class","title":"AuthenticationManager Class","text":"<p>The <code>FirebaseUserInfoViewModel</code> class is designed to manage user data and authentication using Firebase services within an iOS application. It utilizes various Firebase modules such as Authentication, Firestore, and Storage to handle user authentication, data storage, and retrieval.</p> <p>This documentation provides an overview of the class structure, its methods, and how to integrate and use it in your iOS application.</p>"},{"location":"technical/services/firebase/auth/#dependencies","title":"Dependencies","text":"<p>To use <code>FirebaseUserInfoViewModel</code>, ensure the following Firebase modules are integrated into your project using CocoaPods or manually: - FirebaseAuth - FirebaseFirestore - FirebaseDatabase - FirebaseStorage - FirebaseMessaging</p>"},{"location":"technical/services/firebase/auth/#class-structure","title":"Class Structure","text":"<p>Ensure you have the Firebase configuration set up correctly in your project. Instantiate the <code>FirebaseUserInfoViewModel</code> class where needed in your SwiftUI views or controllers.</p> <pre><code>let firebaseViewModel = FirebaseUserInfoViewModel()\n</code></pre>"},{"location":"technical/services/firebase/auth/#authentication-functions","title":"Authentication Functions","text":""},{"location":"technical/services/firebase/auth/#creating-a-new-user","title":"Creating a New User","text":"<pre><code>firebaseViewModel.firebaseCreateUser_Login(email: \"user@example.com\", password: \"password123\", userID: \"uniqueUserID\")\n</code></pre> <p>This function creates a new Firebase user with the provided email, password, and user ID. It also saves default user information to Firestore upon successful creation.</p>"},{"location":"technical/services/firebase/auth/#signing-in","title":"Signing In","text":"<pre><code>firebaseViewModel.firebaseSignIn(email: \"user@example.com\", password: \"password123\")\n</code></pre> <p>Signs in an existing user with the provided email and password. Updates daily login, current level data, and resets consecutive login counts upon successful sign-in.</p>"},{"location":"technical/services/firebase/auth/#deleting-account","title":"Deleting Account","text":"<pre><code>await firebaseViewModel.deleteFirebaseAccount()\n</code></pre> <p>Deletes the current user's Firebase account and associated Firestore document asynchronously. Handles errors if user is not logged in or deletion fails.</p>"},{"location":"technical/services/firebase/auth/#saving-user-information","title":"Saving User Information","text":"<pre><code>firebaseViewModel.saveUserInformation(userID: \"uniqueUserID\", shopPoint: 0, totalExp: 0, consecutiveLogin: 0, totalLogin: 1, level: 1, ownedItems: [], expBoosterEndDay: Date.now, lastLogin: Date.now, dailyReward: true, missionRewards: [true,true,true,true,true,true,true], blockedUsers: [], invisibleMsgs: [], fcmToken: \"\")\n</code></pre> <p>Saves user information to Firestore. This function should typically be called after creating a new user or upon initial login to set default values.</p>"},{"location":"technical/services/firebase/auth/#security-considerations","title":"Security Considerations","text":"<ul> <li>Ensure Firebase Security Rules are correctly configured to restrict access to user data based on user roles and authentication status.</li> <li>Avoid storing sensitive information such as passwords or API keys directly in Firestore or in user documents.</li> <li>Firebase Security Rules: Configure Firebase Security Rules to define who has read and write access to your data.</li> <li>Sensitive Data: Avoid storing sensitive information in Firebase Authentication custom claims or user profiles.</li> </ul>"},{"location":"technical/services/firebase/auth/#conclusion","title":"Conclusion","text":"<p>The <code>FirebaseUserInfoViewModel</code> provides a structured approach to handle user authentication and data management using Firebase services in SwiftUI-based iOS applications. By following the provided guidelines, you can integrate and utilize Firebase effectively to manage user authentication and data securely.</p> <p>For more detailed information on Firebase services and integration, refer to the Firebase Documentation.</p> <p>Implementing Firebase Authentication in your iOS application provides a secure and reliable way to authenticate users using various methods. Ensure to follow best practices and Firebase guidelines to enhance security and user experience.</p> <p>For more details on Firebase Authentication, refer to the Firebase Authentication Documentation.</p> <p>This technical documentation outlines the functionalities and integration of the <code>FirebaseUserInfoViewModel</code> class for managing user authentication and data in an iOS application using Firebase services.</p>"},{"location":"technical/services/firebase/firebaseintro/","title":"Overview","text":"<p>Here's an improved version for technical documentation:</p> <p>We are utilizing Firebase services under the free tier plan, which comes with certain usage limitations. To stay within these limits, it is essential to implement several measures. For instance, optimizing image and data sizes to reduce consumption, minimizing daily request volumes, and so on.</p>"},{"location":"technical/services/firebase/firebaseintro/#firebasemanager-class","title":"FirebaseManager Class","text":"<p>The <code>FirebaseManager</code> class provides a centralized management of Firebase services for authentication, cloud storage, real-time database, and Firestore within an iOS application built using SwiftUI. This documentation explains the structure of the class, its initialization, and the Firebase services it manages.</p>"},{"location":"technical/services/firebase/firebaseintro/#dependencies","title":"Dependencies","text":"<p>To use <code>FirebaseManager</code>, ensure the following Firebase modules are integrated into your project using CocoaPods or manually: - Firebase - FirebaseDatabase - FirebaseFirestore - FirebaseStorage</p>"},{"location":"technical/services/firebase/firebaseintro/#class-structure","title":"Class Structure","text":""},{"location":"technical/services/firebase/firebaseintro/#properties","title":"Properties","text":"<ul> <li>auth: Manages authentication operations using Firebase Authentication.</li> <li>storage: Provides access to Firebase Cloud Storage for storing user-generated content such as photos and videos.</li> <li>firestore: Offers a NoSQL cloud database to store and sync data for client- and server-side development.</li> <li>database: Provides access to Firebase Realtime Database for real-time synchronization and data persistence.</li> </ul> <p>The <code>shared</code> static constant ensures that there is only one instance (<code>FirebaseManager</code>) throughout the application, promoting a unified access point to Firebase services.</p> <p>The <code>init()</code> method initializes Firebase services if they haven't been configured (<code>FirebaseApp.configure()</code>). It sets up: - auth: Authentication service. - storage: Cloud Storage service. - firestore: Firestore service. - database: Realtime Database service.</p>"},{"location":"technical/services/firebase/firebaseintro/#conclusion","title":"Conclusion","text":"<p>The <code>FirebaseManager</code> class simplifies integration and management of Firebase services (Authentication, Firestore, Realtime Database, and Storage) within SwiftUI-based iOS applications. By utilizing the shared instance and following Firebase best practices, you can enhance security, scalability, and efficiency in your application.</p> <p>You can access Firebase services through the shared instance of <code>FirebaseManager</code>.</p>"},{"location":"technical/services/firebase/firestore/","title":"Firestore","text":""},{"location":"technical/services/firebase/firestore/#1-introduction","title":"1. Introduction","text":"<p>This document serves as a technical guide for developers involved in the iOS app development project utilizing Firebase Cloud Firestore.</p>"},{"location":"technical/services/firebase/firestore/#2-firebase-cloud-firestore-overview","title":"2. Firebase Cloud Firestore Overview","text":""},{"location":"technical/services/firebase/firestore/#features","title":"Features","text":"<ul> <li>Real-time database synchronization</li> <li>Scalable NoSQL database</li> <li>Automatic and efficient data syncing</li> </ul>"},{"location":"technical/services/firebase/firestore/#benefits","title":"Benefits","text":"<ul> <li>Seamless integration with Firebase ecosystem</li> <li>Robust querying capabilities</li> <li>Reliable offline support</li> </ul>"},{"location":"technical/services/firebase/firestore/#integration-with-ios","title":"Integration with iOS","text":"<ul> <li>Firebase SDK integration</li> <li>Authentication and security features</li> <li>Cloud Functions for backend logic</li> </ul>"},{"location":"technical/services/firebase/firestore/#3-collections-and-document-structure","title":"3. Collections and Document Structure","text":"<p>The app utilizes five main collections within Firebase Cloud Firestore:</p> <ul> <li>Levels</li> <li>Msgs</li> <li>Notification</li> <li>Users</li> <li>Report</li> </ul> <p>Each collection has a specific purpose and is structured to efficiently store and retrieve data relevant to the application's functionality.</p>"},{"location":"technical/services/firebase/firestore/#4-levels-collection","title":"4. Levels Collection","text":"<p>The Levels collection stores data related to the level and its capacity. This system distinguishes between active and inactive users. Active users are eligible to receive free items.</p>"},{"location":"technical/services/firebase/firestore/#5-msgs-collection","title":"5. Msgs Collection","text":"<p>The Msgs collection stores messages or chat data exchanged within the app.</p> <p>The Msgs collection in Firebase Firestore manages data related to messages sent within the application. This collection is crucial for storing and retrieving communication content between users, facilitating seamless interaction and communication features.</p> <p>The Msgs collection serves several key purposes:</p> <ul> <li> <p>Communication: Stores textual content and multimedia attachments exchanged between users, facilitating seamless communication and interaction within the application.</p> </li> <li> <p>Content Management: Manages URLs to external resources or attachments associated with messages, enriching message content and enhancing user experience.</p> </li> <li> <p>Timestamp Tracking: Records the precise time and date of message interactions, enabling chronological organization and historical reference within message threads.</p> </li> <li> <p>User Identification: Associates messages with specific users (identified by <code>userID</code>), ensuring message attribution and facilitating targeted communication features.</p> </li> </ul>"},{"location":"technical/services/firebase/firestore/#6-notification-collection","title":"6. Notification Collection","text":"<p>The Notification collection manages access tokens and service account information necessary for authentication and secure communication with external services.</p>"},{"location":"technical/services/firebase/firestore/#7-users-collection","title":"7. Users Collection","text":"<p>The User collection in Firebase Firestore stores essential data related to user activities and preferences within the application. This collection is pivotal for maintaining user-specific information and enhancing personalized user experiences.</p> <p>The User collection serves several key purposes:</p> <ul> <li>Personalization: Stores user-specific settings, preferences, and progress data to tailor the application experience.</li> <li>Engagement: Tracks user activity metrics such as login streaks, rewards claimed, and mission progress to enhance user engagement and retention.</li> <li>Data Management: Facilitates efficient management of user-related data, ensuring seamless operation and scalability of the application.</li> <li>Analytics: Provides valuable insights into user behavior and interaction patterns, informing strategic decisions and feature enhancements.</li> </ul>"},{"location":"technical/services/firebase/firestore/#8-report-collection","title":"8. Report Collection","text":"<p>The Report collection stores user-generated reports or feedback submitted within the app.</p>"},{"location":"technical/services/firebase/firestore/#9-security-rules","title":"9. Security Rules","text":"<p>Firebase Cloud Firestore security rules are implemented to restrict access and ensure data privacy and integrity.</p>"},{"location":"technical/services/firebase/firestore/#10-maintenance-and-updates","title":"10. Maintenance and Updates","text":"<p>Guidelines for maintaining and updating Firestore collections and app integration over time.</p> <p>This technical documentation provides comprehensive guidance on utilizing Firebase Cloud Firestore for an iOS app, specifically focusing on the five collections: Levels, Msgs, Notification, Users, and Report. It serves as a valuable resource for developers involved in the project's lifecycle.</p>"},{"location":"technical/services/firebase/messaging/","title":"Messaging","text":"<p>Firebase Cloud Messaging Overview</p> <p>Firebase Messaging Service primarily functions as a notification service. It facilitates the delivery of notifications to users for various events such as new streams, incoming chat messages, updates on new versions, and other relevant notifications.</p> <p>Authentication</p> <p>Firebase Messaging Service employs OAuth 2.0 authentication, requiring an API access token for utilizing the Firebase Cloud Messaging service. The following source code outlines how to obtain the access token, includes logic for checking expiration times, and demonstrates sending messages to users.</p> <p>Using Firebase Cloud Messaging</p> <p>Firebase Cloud Messaging (FCM) enables developers to send notifications and messages to users. </p> <p><code>NotificationManager.swift</code> automatically handles notifications between users. Notifications sent from administrators can be managed using the Firebase Messaging Console.</p> <p>For detailed instructions and best practices on using Firebase Cloud Messaging effectively, refer to the Firebase documentation here.</p>"},{"location":"technical/services/firebase/messaging/#notfication-manager","title":"Notfication Manager","text":""},{"location":"technical/services/firebase/messaging/#overview","title":"Overview","text":"<p><code>NotificationManager.swift</code> manages user notification permissions and Firebase Cloud Messaging (FCM) for the Cheer Supports iOS application. It handles notification permissions, sends notifications to users, and manages Firebase API access tokens.</p>"},{"location":"technical/services/firebase/messaging/#class-notificationmanager","title":"Class: NotificationManager","text":"<p><code>NotificationManager</code> is an <code>ObservableObject</code> responsible for managing notifications and API access tokens.</p>"},{"location":"technical/services/firebase/messaging/#properties","title":"Properties","text":"<ul> <li>hasPermission: Indicates whether the app has notification permissions.</li> <li>accessToken: Stores the current Google API access token for Firebase messaging.</li> <li>fcm_list: An array storing FCM tokens of users currently using the app.</li> </ul>"},{"location":"technical/services/firebase/messaging/#initialization","title":"Initialization","text":"<p>The <code>NotificationManager</code> is initialized asynchronously to check and set notification permissions.</p>"},{"location":"technical/services/firebase/messaging/#methods","title":"Methods","text":"<ol> <li> <p>request(): Requests notification permissions from the user asynchronously using <code>UNUserNotificationCenter</code>.</p> </li> <li> <p>getAuthStatus(): Checks the current notification authorization status asynchronously.</p> </li> <li> <p>sendMessageToDevice(msg: String, title: String): Sends a notification to all users using Firebase Cloud Messaging. It constructs a JSON payload and sends it via HTTP POST request.</p> </li> <li> <p>getAllFCMToken(): Retrieves all FCM tokens from Firestore for users currently using the app.</p> </li> <li> <p>isAccessTokenExpired(): Checks if the current Google API access token is expired asynchronously.</p> </li> <li> <p>updateAccessToken(): Updates the Google API access token asynchronously using <code>ServiceAccountTokenProvider</code>.</p> </li> <li> <p>getAccessToken(): Retrieves the current valid Google API access token asynchronously. It checks for expiration and updates if necessary.</p> </li> <li> <p>updateFirebaseNotificationValues(): Updates Firebase Firestore with the current API access token and expiry time.</p> </li> </ol>"},{"location":"technical/services/firebase/messaging/#error-handling","title":"Error Handling","text":"<ul> <li>Errors related to Firebase operations, network requests, and token management are logged but not explicitly handled within this class.</li> </ul>"},{"location":"technical/services/firebase/messaging/#usage","title":"Usage","text":"<p>To use <code>NotificationManager</code>, initialize an instance and call its methods asynchronously to manage notification permissions and send notifications.</p>"},{"location":"technical/services/firebase/messaging/#example","title":"Example","text":"<pre><code>// Example usage of NotificationManager\n\nlet notificationManager = NotificationManager()\n\n// Request notification permissions\nawait notificationManager.request()\n\n// Send a notification\ndo {\n    await notificationManager.sendMessageToDevice(msg: \"Hello from Cheer Supports!\", title: \"New Message\")\n} catch {\n    print(\"Error sending notification: \\(error.localizedDescription)\")\n}\n</code></pre>"},{"location":"technical/services/firebase/messaging/#dependencies","title":"Dependencies","text":"<pre><code>- Firebase SDK (Firestore, Core, Authentication)\n- OAuth2 library for managing API access tokens\n</code></pre> <p>This documentation provides an overview of <code>NotificationManager.swift</code> functionality, its methods, properties, and usage examples within the Cheer Supports application context. Adjust details and add specific error handling or usage examples as needed for comprehensive documentation.</p>"},{"location":"technical/services/firebase/storage/","title":"Storage","text":""},{"location":"technical/services/firebase/storage/#overview","title":"Overview","text":"<p>This document provides an overview of how Firebase Storage is integrated into our iOS application to handle file storage and retrieval.</p>"},{"location":"technical/services/firebase/storage/#features","title":"Features","text":"<ul> <li>File Upload: Users can upload various types of files (images, videos, documents) to Firebase Storage.</li> <li>File Download: Users can download files previously uploaded to Firebase Storage.</li> <li>Security Rules: Firebase Security Rules are implemented to restrict access to files based on user authentication and authorization.</li> </ul>"},{"location":"technical/services/firebase/storage/#usage","title":"Usage","text":""},{"location":"technical/services/firebase/storage/#file-upload","title":"File Upload","text":"<ol> <li>Upload Task<ul> <li>Use <code>StorageReference</code> to get a reference to the file in Firebase Storage.</li> <li>Use <code>putFile</code> or <code>putData</code> methods to upload files.</li> </ul> </li> </ol> <pre><code>let storage = Storage.storage()\nlet storageRef = storage.reference()\n\n// Local file you want to upload\nlet localFile = URL(fileURLWithPath: \"path/to/local/file\")\n\n// Create a reference to the file you want to upload\nlet fileRef = storageRef.child(\"path/to/destination/file\")\n\n// Upload file to Firebase Storage\nlet uploadTask = fileRef.putFile(from: localFile, metadata: nil) { metadata, error in\n    guard let metadata = metadata else {\n        // Handle error\n        return\n    }\n    // Metadata contains file metadata such as size, content-type, etc.\n}\n</code></pre>"},{"location":"technical/services/firebase/storage/#file-download","title":"File Download","text":"<ol> <li>Download Task<ul> <li>Use <code>getData</code> or <code>write</code> methods to download files from Firebase Storage.</li> </ul> </li> </ol> <pre><code>// Reference to an image file in Firebase Storage\nlet storageRef = Storage.storage().reference(withPath: \"path/to/file\")\n\n// Download in memory with a maximum allowed size of 1MB (1 * 1024 * 1024 bytes)\nstorageRef.getData(maxSize: 1 * 1024 * 1024) { data, error in\n    if let error = error {\n        // Handle any errors\n    } else {\n        // Data for \"path/to/file\" is returned\n        let image = UIImage(data: data!)\n        // Use the image\n    }\n}\n</code></pre>"},{"location":"technical/services/firebase/storage/#security-rules","title":"Security Rules","text":"<ol> <li> <p>Firebase Console</p> <ul> <li>Security rules in the Firebase Console under \"Storage\".</li> </ul> <pre><code>service firebase.storage {\n    match /b/{bucket}/o {\n        match /{allPaths=**} {\n            allow read, write: if request.auth != null;\n        }\n    }\n}\n</code></pre> </li> </ol> <p>This document has outlined the usage of Firebase Storage in our iOS application for file upload, download, and security rules implementation. For further details, refer to the Firebase documentation at Firebase Storage Documentation.</p>"},{"location":"technical/services/firebase/storage/#files-structure","title":"Files Structure","text":"<p>There are six folders existing in storage:</p> <ul> <li>Animated Emoji</li> <li>Background</li> <li>Button Image</li> <li>Chat Images</li> <li>Emoji</li> <li>Levels Logo</li> </ul> <p>To optimize resource usage within the application and minimize Firebase requests under the free tier, background and button images are integrated as local assets. The application is designed to retrieve these assets locally rather than from Firebase storage.</p> <p>Rules for saving files in storage:</p> <ul> <li>Animated Emoji: <code>[File Group Name]/file.png</code></li> <li>Background: <code>[File Group Name]/file.png</code></li> <li>Button Image: <code>[File Group Name]/file.png</code></li> <li>Emoji: <code>[File Group Name]/file.png</code></li> <li>Levels Logo: <code>Level[level name with 2 digits].png</code></li> <li>Chat Image: <code>File name.png</code></li> </ul> <p>The filename for chat images is generated by <code>MsgMenuModel.swift</code>. Check more details in here.</p> <p>There no extension is for this service in Firebase.</p>"}]}